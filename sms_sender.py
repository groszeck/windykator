"""
ModuÅ‚ do wysyÅ‚ania SMS przez SMS API
"""
import requests
import logging
import re
from datetime import datetime

class SMSSender:
    """Klasa do wysyÅ‚ania SMS przez SMS API"""
    
    def __init__(self, api_token, sender_name=None, api_url="https://api.smsapi.pl/sms.do"):
        self.api_token = api_token
        self.sender_name = sender_name  # None domyÅ›lnie
        self.api_url = api_url
        self.logger = logging.getLogger(__name__)
    
    def send_sms(self, phone_number, message):
        """WysyÅ‚a SMS przez SMS API uÅ¼ywajÄ…c OAuth Bearer token"""
        if not self.api_token:
            return False, "Brak tokenu SMS API"
        
        try:
            # Przygotuj nagÅ‚Ã³wki z OAuth Bearer token
            headers = {
                'Authorization': f'Bearer {self.api_token}',
                'Content-Type': 'application/x-www-form-urlencoded'
            }
            
            # Przygotuj dane do wysÅ‚ania (bez tokenu w payload)
            payload = {
                'to': phone_number,
                'message': message,
                'format': 'json'
            }
            
            # Dodaj nadawcÄ™ tylko jeÅ›li jest ustawiony i nie jest None
            if self.sender_name and self.sender_name.strip():
                payload['from'] = self.sender_name
            
            # WyÅ›lij Å¼Ä…danie
            response = requests.post(self.api_url, data=payload, headers=headers, timeout=30)
            
            if response.status_code == 200:
                try:
                    result = response.json()
                    self.logger.info(f"ðŸ“„ OdpowiedÅº SMSAPI: {result}")
                    
                    # SprawdÅº rÃ³Å¼ne moÅ¼liwe formaty odpowiedzi SMSAPI
                    if result.get('error') == 0:
                        self.logger.info(f"SMS wysÅ‚any do: {phone_number}")
                        return True, "SMS wysÅ‚any pomyÅ›lnie"
                    elif 'list' in result and len(result['list']) > 0:
                        # SMSAPI zwraca sukces w formacie {"count":1,"list":[...]}
                        self.logger.info(f"SMS wysÅ‚any do: {phone_number}")
                        return True, "SMS wysÅ‚any pomyÅ›lnie"
                    elif result.get('error') and result.get('error') != 0:
                        # SMSAPI zwrÃ³ciÅ‚ bÅ‚Ä…d
                        error_msg = result.get('message', 'Nieznany bÅ‚Ä…d SMS API')
                        self.logger.error(f"BÅ‚Ä…d SMS API: {error_msg}")
                        return False, f"BÅ‚Ä…d SMS API: {error_msg}"
                    else:
                        # Nieznany format odpowiedzi
                        self.logger.warning(f"Nieznany format odpowiedzi SMSAPI: {result}")
                        return False, f"Nieznany format odpowiedzi SMSAPI"
                except Exception as e:
                    self.logger.error(f"BÅ‚Ä…d parsowania odpowiedzi JSON: {e}")
                    self.logger.error(f"Surowa odpowiedÅº: {response.text}")
                    return False, f"BÅ‚Ä…d parsowania odpowiedzi: {str(e)}"
            else:
                self.logger.error(f"BÅ‚Ä…d HTTP: {response.status_code}")
                self.logger.error(f"OdpowiedÅº: {response.text}")
                return False, f"BÅ‚Ä…d HTTP: {response.status_code}"
                
        except requests.exceptions.RequestException as e:
            self.logger.error(f"BÅ‚Ä…d poÅ‚Ä…czenia SMS API: {e}")
            return False, f"BÅ‚Ä…d poÅ‚Ä…czenia: {str(e)}"
        except Exception as e:
            self.logger.error(f"BÅ‚Ä…d wysyÅ‚ania SMS do {phone_number}: {e}")
            return False, f"BÅ‚Ä…d wysyÅ‚ania SMS: {str(e)}"
    
    def send_reminder_sms(self, phone_number, template_data, sms_template):
        """WysyÅ‚a SMS przypomnienia"""
        try:
            # Debug: wyÅ›wietl dane szablonu
            self.logger.info(f"ðŸ“± Przygotowywanie SMS dla {phone_number}")
            self.logger.info(f"ðŸ“± Template data: {template_data}")
            self.logger.info(f"ðŸ“± SMS template: {sms_template}")
            
            # Przygotuj treÅ›Ä‡ SMS
            message = sms_template.format(**template_data)
            self.logger.info(f"ðŸ“± Przygotowana wiadomoÅ›Ä‡: {message}")
            
            # WyÅ›lij SMS
            success, message_result = self.send_sms(phone_number, message)
            return success, message_result
            
        except Exception as e:
            self.logger.error(f"BÅ‚Ä…d wysyÅ‚ania SMS przypomnienia: {e}")
            return False, f"BÅ‚Ä…d przygotowania SMS: {str(e)}"
    
    def test_connection(self, test_number=None):
        """Testuje poÅ‚Ä…czenie z SMS API uÅ¼ywajÄ…c OAuth Bearer token"""
        try:
            if not self.api_token:
                return False, "Brak tokenu SMS API"
            
            # SprawdÅº token przez wysÅ‚anie testowego SMS - to jest bardziej niezawodne
            test_url = "https://api.smsapi.pl/sms.do"
            headers = {
                'Authorization': f'Bearer {self.api_token}',
                'Content-Type': 'application/x-www-form-urlencoded'
            }
            
            # WyÅ›lij testowy SMS do sprawdzenia autoryzacji
            payload = {
                'to': '48501332990',  # Numer testowy
                'message': f'Test autoryzacji - {datetime.now().strftime("%H:%M:%S")}',
                'format': 'json'
            }
            
            response = requests.post(test_url, data=payload, headers=headers, timeout=30)
            
            if response.status_code == 200:
                try:
                    result = response.json()
                    self.logger.info(f"ðŸ“„ OdpowiedÅº test_connection: {result}")
                    
                    # SprawdÅº czy SMS zostaÅ‚ wysÅ‚any pomyÅ›lnie
                    if result.get('error') == 0 or ('list' in result and len(result['list']) > 0):
                        # Autoryzacja udana - SMS zostaÅ‚ wysÅ‚any
                        if test_number and test_number != '48501332990':
                            # JeÅ›li podano inny numer testowy, wyÅ›lij dodatkowy SMS
                            test_message = f"Test Windykator - PoÅ‚Ä…czenie OK - {datetime.now().strftime('%H:%M:%S')}"
                            success, message = self.send_sms(test_number, test_message)
                            if success:
                                return True, "Test poÅ‚Ä…czenia udany - SMS testowy zostaÅ‚ wysÅ‚any"
                            else:
                                return False, f"Test poÅ‚Ä…czenia nieudany: {message}"
                        else:
                            return True, "Autoryzacja SMS API udana - testowy SMS wysÅ‚any"
                    else:
                        error_msg = result.get('message', 'Nieznany bÅ‚Ä…d SMS API')
                        return False, f"BÅ‚Ä…d autoryzacji SMS API: {error_msg}"
                except Exception as e:
                    self.logger.error(f"BÅ‚Ä…d parsowania odpowiedzi JSON w test_connection: {e}")
                    self.logger.error(f"Surowa odpowiedÅº: {response.text}")
                    return False, f"BÅ‚Ä…d parsowania odpowiedzi: {str(e)}"
            else:
                self.logger.error(f"BÅ‚Ä…d HTTP w test_connection: {response.status_code}")
                self.logger.error(f"OdpowiedÅº: {response.text}")
                return False, f"BÅ‚Ä…d HTTP: {response.status_code}"
                
        except requests.exceptions.RequestException as e:
            self.logger.error(f"BÅ‚Ä…d testu poÅ‚Ä…czenia SMS API: {e}")
            return False, f"BÅ‚Ä…d poÅ‚Ä…czenia: {str(e)}"
        except Exception as e:
            self.logger.error(f"BÅ‚Ä…d testu poÅ‚Ä…czenia SMS API: {e}")
            return False, f"BÅ‚Ä…d testu poÅ‚Ä…czenia: {str(e)}"
    
    def get_account_info(self):
        """Zwraca informacje o koncie SMS API uÅ¼ywajÄ…c OAuth Bearer token"""
        try:
            if not self.api_token:
                return None
            
            test_url = "https://api.smsapi.pl/user.do"
            headers = {
                'Authorization': f'Bearer {self.api_token}',
                'Content-Type': 'application/x-www-form-urlencoded'
            }
            
            # SMSAPI wymaga parametru 'action' dla /user.do
            payload = {
                'action': 'get',
                'format': 'json'
            }
            
            response = requests.post(test_url, data=payload, headers=headers, timeout=30)
            
            if response.status_code == 200:
                result = response.json()
                
                # SprawdÅº czy odpowiedÅº zawiera dane uÅ¼ytkownika
                if result.get('error') == 0:
                    return {
                        'username': result.get('username', ''),
                        'points': result.get('points', 0),
                        'sender_names': result.get('sender_names', [])
                    }
            
            return None
            
        except Exception as e:
            self.logger.error(f"BÅ‚Ä…d pobierania informacji o koncie SMS API: {e}")
            return None
    
    def validate_phone_number(self, phone_number):
        """Waliduje numer telefonu - uproszczona logika"""
        # UsuÅ„ wszystko oprÃ³cz cyfr
        cleaned = re.sub(r'[^\d]', '', str(phone_number))
        
        # UsuÅ„ wiodÄ…ce 00/48/+48
        if cleaned.startswith('0048'):
            cleaned = cleaned[4:]  # UsuÅ„ 0048
        elif cleaned.startswith('48'):
            cleaned = cleaned[2:]  # UsuÅ„ 48
        
        # SprawdÅº czy numer ma 9 cyfr (polski numer)
        if len(cleaned) == 9:
            return f"48{cleaned}"
        else:
            return None 