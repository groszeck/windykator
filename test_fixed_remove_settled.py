#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Test poprawionej funkcji remove_settled_items
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from data_processor import DataProcessor
import pandas as pd

def test_fixed_remove_settled():
    """Testuje poprawionƒÖ funkcjƒô remove_settled_items"""
    print("üß™ Test poprawionej funkcji remove_settled_items")
    print("=" * 60)
    
    # Utw√≥rz procesor danych
    processor = DataProcessor()
    
    # Wczytaj plik
    file_path = "Brak p≈Çatno≈õci 08.08.csv"
    if not os.path.exists(file_path):
        print(f"‚ùå Plik {file_path} nie istnieje!")
        return
    
    print(f"üìÅ Wczytujƒô plik: {file_path}")
    success = processor.load_excel_file(file_path)
    
    if not success:
        print("‚ùå Nie uda≈Ço siƒô wczytaƒá pliku!")
        return
    
    print(f"‚úÖ Plik wczytany pomy≈õlnie!")
    print(f"üìä PoczƒÖtkowa liczba wierszy: {len(processor.excel_data)}")
    
    # Sprawd≈∫ mapowanie kolumn
    print(f"üîç Mapowanie kolumn: {processor.column_mapping}")
    
    # Sprawd≈∫ czy kolumna kwota jest zmapowana
    if 'kwota' in processor.column_mapping:
        kwota_col = processor.column_mapping['kwota']
        print(f"‚úÖ Kolumna kwota jest zmapowana na: {kwota_col}")
        
        # Sprawd≈∫ kilka warto≈õci w tej kolumnie
        print(f"üîç Przyk≈Çadowe warto≈õci w kolumnie {kwota_col}:")
        for i in range(min(5, len(processor.excel_data))):
            value = processor.excel_data.iloc[i][kwota_col]
            print(f"   Wiersz {i}: {value}")
    else:
        print("‚ùå Kolumna kwota nie jest zmapowana!")
        return
    
    # Sprawd≈∫ ile wierszy ma kwotƒô = 0
    print(f"\nüîç Sprawdzam ile wierszy ma kwotƒô = 0...")
    zero_count = 0
    for idx, row in processor.excel_data.iterrows():
        try:
            kwota_str = str(row[kwota_col]).replace(',', '.').strip()
            kwota_num = float(kwota_str) if kwota_str else 0
            if kwota_num == 0:
                zero_count += 1
        except (ValueError, TypeError):
            pass
    
    print(f"üìä Znaleziono {zero_count} wierszy z kwotƒÖ = 0")
    
    # Usu≈Ñ pozycje rozliczone
    print(f"\nüóëÔ∏è Usuwam pozycje rozliczone...")
    removed_count = processor.remove_settled_items()
    print(f"üóëÔ∏è Usuniƒôto {removed_count} pozycji rozliczonych")
    print(f"üìä Liczba wierszy PO usuniƒôciu: {len(processor.excel_data)}")
    
    # Sprawd≈∫ czy wszystkie pozosta≈Çe kwoty sƒÖ > 0
    print(f"\nüîç Sprawdzam czy wszystkie pozosta≈Çe kwoty sƒÖ > 0...")
    all_positive = True
    for idx, row in processor.excel_data.iterrows():
        try:
            kwota_str = str(row[kwota_col]).replace(',', '.').strip()
            kwota_num = float(kwota_str) if kwota_str else 0
            if kwota_num <= 0:
                print(f"‚ùå Znaleziono kwotƒô ‚â§ 0 w wierszu {idx}: {kwota_num}")
                all_positive = False
        except (ValueError, TypeError):
            print(f"‚ö†Ô∏è Nie mo≈ºna przekonwertowaƒá kwoty w wierszu {idx}: {row[kwota_col]}")
    
    if all_positive:
        print("‚úÖ Wszystkie pozosta≈Çe kwoty sƒÖ > 0")
    else:
        print("‚ùå Znaleziono kwoty ‚â§ 0 w pozosta≈Çych wierszach")
    
    print("\n" + "=" * 60)
    print("üèÅ Test zako≈Ñczony")

if __name__ == "__main__":
    test_fixed_remove_settled() 