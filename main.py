"""
G≈Ç√≥wny plik aplikacji Windykator
"""
import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import threading
import logging
import glob
import os
import time

# Import modu≈Ç√≥w
from config import Config
from data_processor import DataProcessor
from email_sender import EmailSender
from sms_sender import SMSSender
from ui_components import UIComponents

class WindykatorApp:
    """G≈Ç√≥wna klasa aplikacji Windykator"""
    
    def __init__(self):
        # Konfiguracja logowania
        logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        self.logger = logging.getLogger(__name__)
        
        # Inicjalizacja komponent√≥w
        self.config = Config()
        self.data_processor = DataProcessor()
        self.email_sender = None
        self.sms_sender = None
        
        # Zmienne aplikacji
        self.preview_items = []
        self.sending_window = None
        
        # Inicjalizacja historii edytora
        self.editor_history = []
        self.current_history_index = -1
        
        # Tworzenie g≈Ç√≥wnego okna
        self.root = tk.Tk()
        self.root.title("Windykator - System Windykacji")
        self.root.geometry("1200x800")
        self.root.minsize(1000, 600)
        
        # Konfiguracja Azure theme
        self.setup_azure_theme()
        
        # Tworzenie interfejsu
        self.create_widgets()
        
        # Automatyczne wczytanie konfiguracji
        self.load_config_on_startup()
        
        # Automatyczne wczytanie placeholders
        self.load_placeholders()
        
        # Dodaj przycisk do prze≈ÇƒÖczania motywu
        self.create_theme_switch()
    
    def setup_azure_theme(self):
        """Konfiguracja Azure ttk theme"""
        try:
            # Za≈Çaduj Azure theme i ustaw jasny motyw na starcie
            self.root.tk.call("source", "azure.tcl")
            self.root.tk.call("set_theme", "light")
            
            print("‚úÖ Azure theme zosta≈Ç za≈Çadowany pomy≈õlnie (light)")
            
            # Dodatkowe style
            style = ttk.Style()
            style.configure('Header.TLabel', font=('Arial', 16, 'bold'))
            style.configure('Info.TLabel', foreground=self.config.text_color)
            style.configure('Success.TLabel', foreground=self.config.success_color)
            style.configure('Warning.TLabel', foreground=self.config.warning_color)
            style.configure('Error.TLabel', foreground=self.config.danger_color)
            
            # Konfiguracja kolor√≥w dla przycisk√≥w Primary
            style.configure('Primary.TButton', 
                          background=self.config.primary_color,
                          foreground=self.config.white_color,
                          borderwidth=0,
                          focuscolor=self.config.primary_color,
                          relief='flat',
                          force=True)
            style.map('Primary.TButton',
                     background=[('active', self.config.primary_color),
                               ('pressed', self.config.primary_color),
                               ('!active', self.config.primary_color),
                               ('disabled', self.config.primary_color),
                               ('alternate', self.config.primary_color),
                               ('readonly', self.config.primary_color)],
                     foreground=[('active', self.config.white_color),
                               ('pressed', self.config.white_color),
                               ('!active', self.config.white_color),
                               ('disabled', self.config.white_color),
                               ('alternate', self.config.white_color),
                               ('readonly', self.config.white_color)],
                     border=[('active', self.config.primary_color),
                            ('pressed', self.config.primary_color),
                            ('!active', self.config.primary_color),
                            ('disabled', self.config.primary_color),
                            ('alternate', self.config.primary_color),
                            ('readonly', self.config.primary_color)])
            
            # Dodatkowo spr√≥buj nadpisaƒá domy≈õlny styl Button
            style.configure('TButton', 
                          background=self.config.primary_color,
                          foreground=self.config.white_color,
                          force=True)
            style.map('TButton',
                     background=[('active', self.config.primary_color),
                               ('pressed', self.config.primary_color),
                               ('!active', self.config.primary_color)],
                     foreground=[('active', self.config.white_color),
                               ('pressed', self.config.white_color),
                               ('!active', self.config.white_color)])
            
        except Exception as e:
            print(f"‚ö†Ô∏è B≈ÇƒÖd ≈Çadowania Azure theme: {e}")
            print("U≈ºywam domy≈õlnego stylu ttk")
            
            # Fallback do domy≈õlnego stylu
            style = ttk.Style()
            style.theme_use('clam')
            
            # Konfiguracja kolor√≥w dla przycisk√≥w Primary w fallback
            style.configure('Primary.TButton', 
                          background=self.config.primary_color,
                          foreground=self.config.white_color,
                          borderwidth=0,
                          focuscolor=self.config.primary_color)
            style.map('Primary.TButton',
                     background=[('active', self.config.primary_color),
                               ('pressed', self.config.primary_color)],
                     foreground=[('active', self.config.white_color),
                               ('pressed', self.config.white_color)])
    
    def create_theme_switch(self):
        """Tworzenie przycisku do prze≈ÇƒÖczania motywu"""
        try:
            # Sprawd≈∫ czy Azure theme jest dostƒôpny
            self.root.tk.call("source", "azure.tcl")
            
            # Utw√≥rz przycisk prze≈ÇƒÖczania motywu z bia≈Çymi napisami
            theme_button = tk.Button(
                self.root, 
                text="üåô", 
                command=self.toggle_theme,
                bg=self.config.primary_color,
                fg=self.config.white_color,
                relief='flat',
                borderwidth=0,
                font=('Arial', 12, 'bold'),
                cursor='hand2',
                width=3
            )
            theme_button.place(relx=0.98, rely=0.02, anchor='ne')
            
            # Zapisz referencjƒô do przycisku
            self.theme_button = theme_button
            
            print("‚úÖ Przycisk prze≈ÇƒÖczania motywu zosta≈Ç utworzony")
        except Exception as e:
            print(f"Nie mo≈ºna utworzyƒá przycisku prze≈ÇƒÖczania motywu: {e}")
    
    def toggle_theme(self):
        """Prze≈ÇƒÖczanie miƒôdzy jasnym a ciemnym motywem"""
        try:
            current_theme = self.root.tk.call("ttk::style", "theme", "use")
            if current_theme == "azure-light":
                self.root.tk.call("set_theme", "dark")
                self.theme_button.configure(text="‚òÄÔ∏è")
            else:
                self.root.tk.call("set_theme", "light")
                self.theme_button.configure(text="üåô")
        except Exception as e:
            print(f"B≈ÇƒÖd prze≈ÇƒÖczania motywu: {e}")
    
    def create_widgets(self):
        """Tworzenie interfejsu u≈ºytkownika"""
        # Kontener g≈Ç√≥wny
        main_container = ttk.Frame(self.root)
        main_container.pack(fill=tk.BOTH, expand=True)
        
        # Komponenty UI
        ui_components = UIComponents(self.config)
        
        # Nag≈Ç√≥wek
        self.header_frame, self.status_label = ui_components.create_header(main_container)
        
        # Notebook z zak≈Çadkami
        self.notebook = ui_components.create_notebook(main_container)
        
        # Zak≈Çadka danych i mapowania
        self.data_mapping_widgets = ui_components.create_data_mapping_tab(self.notebook)
        
        # Zak≈Çadka szablon√≥w
        self.templates_widgets = ui_components.create_templates_tab(self.notebook)
        
        # Zak≈Çadka wysy≈Çki
        self.sending_widgets = ui_components.create_sending_tab(self.notebook)
        
        # Zak≈Çadka konfiguracji
        self.config_widgets = ui_components.create_config_tab(self.notebook)
        
        # Pod≈ÇƒÖczenie funkcji do przycisk√≥w
        self.connect_buttons()
        
        # Wczytanie szablon√≥w
        self.load_templates()
    
    def on_test_mode_change(self, *args):
        """Obs≈Çuguje zmianƒô trybu testowego"""
        try:
            test_mode = self.sending_widgets['test_mode_var'].get()
            if test_mode:
                # Aktualizuj tekst przycisku
                self.sending_widgets['send_btn'].config(text="üß™ Testuj wysy≈Çkƒô")
                # Aktualizuj status
                self.status_label.config(text="üß™ Tryb testowej wysy≈Çki aktywny")
                # Poka≈º sekcjƒô log√≥w
                if hasattr(self, 'test_logs_frame'):
                    self.test_logs_frame.pack(fill=tk.BOTH, expand=True, pady=(10, 0))
                                    # Wyczy≈õƒá logi
                if hasattr(self, 'test_logs_text'):
                    self.test_logs_text.delete(1.0, tk.END)
                    self.test_logs_text.insert(tk.END, "üß™ Tryb testowej wysy≈Çki aktywny\n")
                    self.test_logs_text.insert(tk.END, "=" * 60 + "\n")
                    self.test_logs_text.insert(tk.END, "üìù Logi bƒôdƒÖ wy≈õwietlane tutaj podczas testowania...\n")
                    self.test_logs_text.insert(tk.END, "üìä Status wysy≈Çki bƒôdzie aktualizowany w tabeli powy≈ºej\n")
                    self.test_logs_text.insert(tk.END, "üöÄ Kliknij 'Testuj wysy≈Çkƒô' aby rozpoczƒÖƒá test\n")
                    self.test_logs_text.insert(tk.END, "=" * 60 + "\n\n")
                    self.test_logs_text.insert(tk.END, "‚ÑπÔ∏è W trybie testowym:\n")
                    self.test_logs_text.insert(tk.END, "   ‚Ä¢ Nie sƒÖ wysy≈Çane rzeczywiste wiadomo≈õci\n")
                    self.test_logs_text.insert(tk.END, "   ‚Ä¢ Sprawdzane sƒÖ szablony i dane\n")
                    self.test_logs_text.insert(tk.END, "   ‚Ä¢ Symulowane jest wys≈Çanie\n")
                    self.test_logs_text.insert(tk.END, "   ‚Ä¢ Sprawdzane sƒÖ b≈Çƒôdy formatowania\n")
                    self.test_logs_text.insert(tk.END, "   ‚Ä¢ Testowane sƒÖ placeholdery\n")
                    self.test_logs_text.insert(tk.END, "   ‚Ä¢ Sprawdzane sƒÖ dane odbiorc√≥w\n")
                    self.test_logs_text.insert(tk.END, "   ‚Ä¢ Weryfikowane sƒÖ adresy email i numery telefon√≥w\n")
                    self.test_logs_text.insert(tk.END, "   ‚Ä¢ Sprawdzane sƒÖ b≈Çƒôdy w szablonach\n")
                    self.test_logs_text.insert(tk.END, "   ‚Ä¢ Testowane sƒÖ r√≥≈ºne formaty danych\n")
                    self.test_logs_text.insert(tk.END, "   ‚Ä¢ Weryfikowane sƒÖ b≈Çƒôdy w danych\n\n")
            else:
                # Przywr√≥ƒá normalny tekst
                self.sending_widgets['send_btn'].config(text="üöÄ Rozpocznij wysy≈Çkƒô")
                # Aktualizuj status
                self.status_label.config(text="‚ÑπÔ∏è Gotowy do pracy")
                # Ukryj sekcjƒô log√≥w
                if hasattr(self, 'test_logs_frame'):
                    self.test_logs_frame.pack_forget()
        except Exception as e:
            self.logger.error(f"B≈ÇƒÖd zmiany trybu testowego: {e}")
    
    def connect_buttons(self):
        """Pod≈ÇƒÖczenie funkcji do przycisk√≥w"""
        # Przyciski mapowania danych
        self.data_mapping_widgets['load_btn'].config(command=self.load_excel_file)
        self.data_mapping_widgets['save_mapping_btn'].config(command=self.save_mapping)
        self.data_mapping_widgets['load_mapping_btn'].config(command=self.load_mapping)
        self.data_mapping_widgets['generate_btn'].config(command=self.generate_preview)
        self.data_mapping_widgets['add_item_btn'].config(command=self.add_preview_item)
        self.data_mapping_widgets['remove_item_btn'].config(command=self.remove_selected_preview_item)
        self.data_mapping_widgets['edit_item_btn'].config(command=self.edit_preview_item)
        self.data_mapping_widgets['remove_settled_btn'].config(command=self.remove_settled_items)
        
        # Przyciski szablon√≥w
        self.templates_widgets['save_email_btn'].config(command=lambda: self.save_template('email'))
        self.templates_widgets['load_email_btn'].config(command=lambda: self.load_template('email'))
        self.templates_widgets['preview_email_btn'].config(command=self.show_email_preview)
        self.templates_widgets['save_sms_btn'].config(command=lambda: self.save_template('sms'))
        self.templates_widgets['load_sms_btn'].config(command=lambda: self.load_template('sms'))
        
        # Pod≈ÇƒÖczenie przycisk√≥w edytora WYSIWYG
        # Przyciski stylowania (czcionki i rozmiary)
        for btn, value in self.templates_widgets['style_buttons']:
            if 'üî§' in btn.cget('text'):  # Przyciski czcionek
                btn.config(command=lambda v=value: self.apply_font_family(v))
            elif 'üìè' in btn.cget('text'):  # Przyciski rozmiar√≥w
                btn.config(command=lambda v=value: self.apply_font_size(v))
        
        # Przyciski formatowania
        for btn, tag, tooltip in self.templates_widgets['format_buttons']:
            if tag in ['bold', 'italic', 'underline']:
                btn.config(command=lambda t=tag: self.apply_format(t))
            elif tag == 'color':
                btn.config(command=self.apply_color)
            elif tag == 'undo':
                btn.config(command=self.undo_action)
            elif tag == 'redo':
                btn.config(command=self.redo_action)
        
        # Przyciski stopki
        for btn, action, tooltip in self.templates_widgets['footer_buttons']:
            if action == 'html_footer':
                btn.config(command=self.add_html_footer)
            elif action == 'text_footer':
                btn.config(command=self.add_text_footer)
            elif action == 'clear_footer':
                btn.config(command=self.clear_footer)
        
        # Przyciski placeholders
        self.templates_widgets['add_placeholder_btn'].config(command=self.add_placeholder)
        self.templates_widgets['edit_placeholder_btn'].config(command=self.edit_placeholder)
        self.templates_widgets['delete_placeholder_btn'].config(command=self.delete_placeholder)
        self.templates_widgets['save_placeholders_btn'].config(command=self.save_placeholders)
        self.templates_widgets['load_placeholders_btn'].config(command=self.load_placeholders)
        self.templates_widgets['reset_placeholders_btn'].config(command=self.reset_placeholders)
        
        # Przyciski wysy≈Çki
        self.sending_widgets['send_btn'].config(command=self.start_sending)
        self.sending_widgets['export_btn'].config(command=self.export_sending_status_to_csv)
        
        # Pod≈ÇƒÖcz checkbox trybu testowego
        self.sending_widgets['test_mode_var'].trace('w', self.on_test_mode_change)
        
        # Przyciski konfiguracji
        self.config_widgets['save_email_config_btn'].config(command=self.save_email_config)
        self.config_widgets['test_email_btn'].config(command=self.test_email_connection)
        self.config_widgets['save_sms_config_btn'].config(command=self.save_sms_config)
        self.config_widgets['test_sms_btn'].config(command=self.test_sms_connection)
    
    def load_config_on_startup(self):
        """Wczytuje konfiguracjƒô przy starcie aplikacji"""
        try:
            # Wczytaj konfiguracjƒô API
            api_config = self.config.load_api_config()
            
            # Ustaw warto≈õci w polach konfiguracji
            for field, var in self.config_widgets['email_vars'].items():
                if field in api_config:
                    var.set(api_config[field])
            
            for field, var in self.config_widgets['sms_vars'].items():
                if field in api_config:
                    var.set(api_config[field])
            
            # Wczytaj mapowanie kolumn
            mapping = self.config.load_mapping()
            for field, combo in self.data_mapping_widgets['mapping_fields'].items():
                if field in mapping:
                    combo.set(mapping[field])
            
            print("‚úÖ Konfiguracja zosta≈Ça wczytana")
            
        except Exception as e:
            print(f"‚ö†Ô∏è B≈ÇƒÖd wczytywania konfiguracji: {str(e)}")
    
    def load_templates(self):
        """Wczytuje szablony do edytor√≥w"""
        try:
            # Wczytaj szablon email
            email_template = self.config.load_template('email')
            self.templates_widgets['email_editor'].delete(1.0, tk.END)
            self.templates_widgets['email_editor'].insert(1.0, email_template)
            
            # Pod≈ÇƒÖcz ≈õledzenie zmian w edytorze email
            self.templates_widgets['email_editor'].bind('<KeyRelease>', self.on_editor_change)
            self.templates_widgets['email_editor'].bind('<ButtonRelease-1>', self.on_editor_change)
            
            # Wczytaj szablon SMS
            sms_template = self.config.load_template('sms')
            self.templates_widgets['sms_editor'].delete(1.0, tk.END)
            self.templates_widgets['sms_editor'].insert(1.0, sms_template)
            
            print("‚úÖ Szablony zosta≈Çy wczytane")
            
        except Exception as e:
            print(f"‚ö†Ô∏è B≈ÇƒÖd wczytywania szablon√≥w: {str(e)}")
    
    def load_excel_file(self):
        """Wczytywanie pliku Excel/CSV/TSV"""
        try:
            # Wybierz plik
            file_path = filedialog.askopenfilename(
                title="Wybierz plik Excel/CSV/TSV",
                filetypes=[
                    ("Pliki Excel, CSV i TSV", "*.xlsx *.xls *.csv *.tsv"),
                    ("Pliki Excel", "*.xlsx *.xls"),
                    ("Pliki CSV i TSV", "*.csv *.tsv"),
                    ("Wszystkie pliki", "*.*")
                ]
            )
            
            if not file_path:
                return
            
            # Wczytaj dane
            if self.data_processor.load_excel_file(file_path):
                # Aktualizuj status
                row_count = self.data_processor.get_row_count()
                self.data_mapping_widgets['file_info'].config(
                    text=f"‚úÖ Wczytano: {row_count} wierszy", 
                    style='Success.TLabel'
                )
                
                # Aktualizuj comboboxy z kolumnami
                self.update_column_mapping()
                
                # Automatycznie wczytaj mapowanie je≈õli istnieje
                self.load_mapping()
                
                self.status_label.config(text=f"‚úÖ Wczytano plik: {os.path.basename(file_path)}")
                
            else:
                messagebox.showerror("B≈ÇƒÖd", "Nie uda≈Ço siƒô wczytaƒá pliku")
                
        except Exception as e:
            messagebox.showerror("B≈ÇƒÖd", f"B≈ÇƒÖd wczytywania pliku:\n{str(e)}")
            self.logger.error(f"B≈ÇƒÖd wczytywania pliku: {e}")
    
    def update_column_mapping(self):
        """Aktualizuje comboboxy z kolumnami"""
        columns = self.data_processor.get_columns()
        
        # Debug: wy≈õwietl kolumny
        print(f"üîç Dostƒôpne kolumny w pliku: {columns}")
        print(f"üîç Liczba kolumn: {len(columns)}")
        
        for field, combo in self.data_mapping_widgets['mapping_fields'].items():
            combo['values'] = [''] + columns
            combo.set('')  # Wyczy≈õƒá wyb√≥r
        
        # Aktualizuj informacjƒô o pliku z kolumnami
        if self.data_processor.excel_data is not None:
            row_count = len(self.data_processor.excel_data)
            col_count = len(columns)
            self.data_mapping_widgets['file_info'].config(
                text=f"‚úÖ Wczytano: {row_count} wierszy, {col_count} kolumn", 
                style='Success.TLabel'
            )
    
    def generate_preview(self):
        """Generowanie podglƒÖdu danych"""
        if self.data_processor.excel_data is None:
            messagebox.showwarning("Ostrze≈ºenie", "Najpierw wczytaj plik Excel/CSV")
            return
        
        print(f"üîÑ Generujƒô podglƒÖd dla {len(self.data_processor.excel_data)} wierszy...")
        
        # Przygotuj mapowanie kolumn
        mapping = {}
        for field, combo in self.data_mapping_widgets['mapping_fields'].items():
            if combo.get():
                mapping[field] = combo.get()
        
        # Debug: wy≈õwietl mapowanie
        print(f"üîç Mapowanie kolumn: {mapping}")
        
        # Ustaw mapowanie przed walidacjƒÖ
        self.data_processor.set_column_mapping(mapping)
        
        # Sprawd≈∫ czy wszystkie wymagane pola sƒÖ zmapowane
        required_fields = self.config.get_required_fields()
        print(f"üîç Wymagane pola: {required_fields}")
        missing_fields = self.data_processor.validate_mapping(required_fields)
        print(f"üîç BrakujƒÖce pola: {missing_fields}")
        
        if missing_fields:
            messagebox.showwarning("Ostrze≈ºenie", 
                                 f"Zmapuj wymagane pola: {', '.join(missing_fields)}")
            return
        
        # Wyczy≈õƒá poprzedni podglƒÖd
        print("üßπ Czyszczƒô poprzedni podglƒÖd...")
        old_items = len(self.data_mapping_widgets['preview_tree'].get_children())
        print(f"üßπ Stary podglƒÖd zawiera≈Ç: {old_items} pozycji")
        
        for item in self.data_mapping_widgets['preview_tree'].get_children():
            self.data_mapping_widgets['preview_tree'].delete(item)
        
        print("üßπ Wyczyszczono poprzedni podglƒÖd")
        
        # Dodaj wiersze do podglƒÖdu
        print("üìä Pobieram dane do podglƒÖdu...")
        # Pobierz wszystkie wiersze lub maksymalnie 1000 (zamiast domy≈õlnych 10)
        max_preview_rows = min(1000, len(self.data_processor.excel_data))
        # U≈ºyj zmapowanego podglƒÖdu zamiast oryginalnych kolumn
        preview_data = self.data_processor.get_preview_data_mapped(max_rows=max_preview_rows)
        print(f"üìä Pobrano {len(preview_data)} wierszy do podglƒÖdu (maksymalnie {max_preview_rows})")
        
        print("üìù Dodajƒô wiersze do Treeview...")
        for i, row_data in enumerate(preview_data):
            # Przygotuj warto≈õci w odpowiedniej kolejno≈õci
            values = (
                row_data.get('kontrahent', ''),
                row_data.get('nip', ''),
                row_data.get('nr_faktury', ''),
                row_data.get('email', ''),
                row_data.get('telefon', ''),
                row_data.get('kwota', ''),
                row_data.get('dni_po_terminie', '')
            )
            self.data_mapping_widgets['preview_tree'].insert('', 'end', values=values, tags=(i,))
        
        new_items = len(self.data_mapping_widgets['preview_tree'].get_children())
        print(f"‚úÖ Dodano {len(preview_data)} wierszy do podglƒÖdu")
        print(f"‚úÖ Treeview zawiera teraz: {new_items} pozycji")
        
        # Aktualizuj informacjƒô o liczbie pozycji
        print("‚ÑπÔ∏è Aktualizujƒô informacjƒô o liczbie pozycji...")
        self.update_preview_info()
        
        total_rows = len(self.data_processor.excel_data)
        messagebox.showinfo("Sukces", f"Wygenerowano podglƒÖd: {len(preview_data)} pozycji z {total_rows} dostƒôpnych")
    
    def add_preview_item(self):
        """Dodawanie pozycji do podglƒÖdu"""
        if self.data_processor.excel_data is None:
            messagebox.showwarning("Ostrze≈ºenie", "Najpierw wczytaj plik Excel/CSV")
            return
        
        # Utw√≥rz okno dialogowe
        dialog = tk.Toplevel(self.root)
        dialog.title("Dodaj pozycjƒô do podglƒÖdu")
        dialog.geometry("800x600")
        dialog.transient(self.root)
        
        # Kontener
        container = ttk.Frame(dialog, padding="20")
        container.pack(fill=tk.BOTH, expand=True)
        
        # Nag≈Ç√≥wek
        header = ttk.Label(container, text="‚ûï Dodaj pozycjƒô do podglƒÖdu", style='Header.TLabel')
        header.pack(pady=(0, 20))
        
        # Notebook z zak≈Çadkami
        notebook = ttk.Notebook(container)
        notebook.pack(fill=tk.BOTH, expand=True)
        
        # Zak≈Çadka 1: Wybierz z danych
        select_frame = ttk.Frame(notebook)
        notebook.add(select_frame, text="üìã Wybierz z danych")
        
        # Treeview z danymi
        tree_frame = ttk.Frame(select_frame)
        tree_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        columns = self.data_processor.get_columns()
        data_tree = ttk.Treeview(tree_frame, columns=columns, show='headings', height=10)
        
        for col in columns:
            data_tree.heading(col, text=col)
            data_tree.column(col, width=120)
        
        # Dodaj dane do treeview
        for index, row in self.data_processor.excel_data.iterrows():
            values = [str(row[col]) for col in columns]
            data_tree.insert('', 'end', values=values, tags=(index,))
        
        data_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(tree_frame, orient=tk.VERTICAL, command=data_tree.yview)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        data_tree.configure(yscrollcommand=scrollbar.set)
        
        # Przycisk dodawania
        def add_selected():
            selected = data_tree.selection()
            if not selected:
                messagebox.showwarning("Ostrze≈ºenie", "Wybierz pozycjƒô do dodania")
                return
            
            for item in selected:
                item_data = data_tree.item(item)
                index = item_data['tags'][0]
                self.add_item_to_preview(index)
            
            dialog.destroy()
            messagebox.showinfo("Sukces", f"Dodano {len(selected)} pozycji do podglƒÖdu")
        
        add_btn = ttk.Button(select_frame, text="‚ûï Dodaj zaznaczone", 
                            command=add_selected, style='Primary.TButton')
        add_btn.pack(pady=(10, 0))
        
        # Zak≈Çadka 2: Rƒôczne dodawanie
        manual_frame = ttk.Frame(notebook)
        notebook.add(manual_frame, text="‚úèÔ∏è Rƒôczne dodawanie")
        
        # Pola do rƒôcznego wprowadzania
        fields = [
            ('kontrahent', 'Kontrahent'),
            ('nip', 'NIP'),
            ('nr_faktury', 'Nr Faktury'),
            ('email', 'Email'),
            ('telefon', 'Telefon'),
            ('kwota', 'Kwota'),
            ('data_faktury', 'Data Faktury')
        ]
        
        manual_entries = {}
        for i, (field, label) in enumerate(fields):
            frame = ttk.Frame(manual_frame)
            frame.pack(fill=tk.X, pady=2)
            
            label_widget = ttk.Label(frame, text=f"{label}:", width=15)
            label_widget.pack(side=tk.LEFT)
            
            entry = ttk.Entry(frame, width=40)
            entry.pack(side=tk.LEFT, padx=(10, 0))
            
            manual_entries[field] = entry
        
        # Przycisk dodawania rƒôcznego
        def add_manual():
            values = [manual_entries[field].get() for field, _ in fields]
            
            # Sprawd≈∫ wymagane pola
            if not values[0] or not values[2]:  # kontrahent i nr_faktury
                messagebox.showwarning("Ostrze≈ºenie", "Wype≈Çnij pola Kontrahent i Nr Faktury")
                return
            
            self.add_manual_item_to_preview(values)
            dialog.destroy()
            messagebox.showinfo("Sukces", "Dodano pozycjƒô do podglƒÖdu")
        
        add_manual_btn = ttk.Button(manual_frame, text="‚ûï Dodaj rƒôcznie", 
                                   command=add_manual, style='Primary.TButton')
        add_manual_btn.pack(pady=(20, 0))
    
    def add_manual_item_to_preview(self, values):
        """Dodaje rƒôcznie wprowadzonƒÖ pozycjƒô do podglƒÖdu"""
        # Sprawd≈∫ czy pozycja ju≈º istnieje
        existing_items = self.data_mapping_widgets['preview_tree'].get_children()
        for item in existing_items:
            item_data = self.data_mapping_widgets['preview_tree'].item(item)
            if item_data['values'][2] == values[2]:  # Nr Faktury
                messagebox.showinfo("Informacja", "Ta pozycja ju≈º jest w podglƒÖdzie")
                return
        
        # Oblicz dni po terminie
        dni_po_terminie = ""
        if values[6]:  # Data Faktury
            try:
                from datetime import datetime
                data_faktury_str = values[6]
                for fmt in ['%Y-%m-%d', '%d.%m.%Y', '%Y/%m/%d', '%d/%m/%Y']:
                    try:
                        data_faktury = datetime.strptime(data_faktury_str, fmt)
                        dni_po_terminie = str((datetime.now() - data_faktury).days)
                        break
                    except ValueError:
                        continue
                if not dni_po_terminie:
                    dni_po_terminie = "B≈ÇƒÖd daty"
            except Exception:
                dni_po_terminie = "B≈ÇƒÖd daty"
        
        # Dodaj do podglƒÖdu
        preview_values = (
            values[0],  # Kontrahent
            values[1],  # NIP
            values[2],  # Nr Faktury
            values[3],  # Email
            values[4],  # Telefon
            values[5],  # Kwota
            dni_po_terminie
        )
        
        self.data_mapping_widgets['preview_tree'].insert('', 'end', values=preview_values, tags=(-1,))
        self.update_preview_info()
    
    def add_item_to_preview(self, index):
        """Dodaje pozycjƒô do podglƒÖdu na podstawie indeksu"""
        template_data = self.data_processor.process_row(index)
        if not template_data:
            return
        
        # Sprawd≈∫ czy pozycja ju≈º istnieje
        existing_items = self.data_mapping_widgets['preview_tree'].get_children()
        for item in existing_items:
            item_data = self.data_mapping_widgets['preview_tree'].item(item)
            if item_data['values'][2] == template_data.get('nr_faktury', ''):  # Nr Faktury
                messagebox.showinfo("Informacja", "Ta pozycja ju≈º jest w podglƒÖdzie")
                return
        
        # Dodaj do podglƒÖdu
        values = (
            template_data.get('kontrahent', ''),
            template_data.get('nip', ''),
            template_data.get('nr_faktury', ''),
            template_data.get('email', ''),
            template_data.get('telefon', ''),
            template_data.get('kwota', ''),
            template_data.get('dni_po_terminie', '')
        )
        
        self.data_mapping_widgets['preview_tree'].insert('', 'end', values=values, tags=(index,))
        self.update_preview_info()
    
    def remove_selected_preview_item(self):
        """Usuwa wybranƒÖ pozycjƒô z podglƒÖdu"""
        selection = self.data_mapping_widgets['preview_tree'].selection()
        if selection:
            self.data_mapping_widgets['preview_tree'].delete(selection[0])
            self.update_preview_info()
        else:
            messagebox.showwarning("Ostrze≈ºenie", "Wybierz pozycjƒô do usuniƒôcia")
    
    def edit_preview_item(self):
        """Edytuje wybranƒÖ pozycjƒô w podglƒÖdzie"""
        try:
            selection = self.data_mapping_widgets['preview_tree'].selection()
            if not selection:
                messagebox.showwarning("Ostrze≈ºenie", "Wybierz pozycjƒô do edycji")
            return
        
            item = selection[0]
            values = list(self.data_mapping_widgets['preview_tree'].item(item)['values'])
            
            # Okno edycji
            edit_window = tk.Toplevel(self.root)
            edit_window.title("‚úèÔ∏è Edytuj pozycjƒô")
            edit_window.geometry("500x400")
            edit_window.configure(bg='white')
            
            # G≈Ç√≥wny kontener
            main_frame = ttk.Frame(edit_window)
            main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
            
            # Tytu≈Ç
            title_label = ttk.Label(main_frame, text="Edytuj dane pozycji", 
                                   font=('Arial', 14, 'bold'))
            title_label.pack(pady=(0, 20))
            
            # Pola edycji
            edit_vars = {}
            fields = ['Kontrahent', 'NIP', 'Nr Faktury', 'Email', 'Telefon', 'Kwota', 'Dni Po Terminie']
            
            for i, field in enumerate(fields):
                frame = ttk.Frame(main_frame)
                frame.pack(fill=tk.X, pady=5)
                
                label = ttk.Label(frame, text=f"{field}:", width=15)
                label.pack(side=tk.LEFT)
                
                var = tk.StringVar(value=str(values[i]) if i < len(values) else "")
                entry = ttk.Entry(frame, textvariable=var, width=30)
                entry.pack(side=tk.LEFT, padx=(10, 0), fill=tk.X, expand=True)
                
                edit_vars[field] = var
            
            # Przyciski akcji
            buttons_frame = ttk.Frame(main_frame)
            buttons_frame.pack(fill=tk.X, pady=(20, 0))
            
            save_btn = tk.Button(buttons_frame, text="üíæ Zapisz zmiany", 
                                bg=self.config.primary_color,
                                fg=self.config.white_color,
                                relief='flat',
                                borderwidth=0,
                                font=('Arial', 10, 'bold'),
                                cursor='hand2',
                                command=lambda: self.save_edited_item(edit_window, item, edit_vars))
            save_btn.pack(side=tk.LEFT, padx=(0, 10))
            
            cancel_btn = tk.Button(buttons_frame, text="‚ùå Anuluj", 
                                  bg=self.config.primary_color,
                                  fg=self.config.white_color,
                                  relief='flat',
                                  borderwidth=0,
                                  font=('Arial', 10, 'bold'),
                                  cursor='hand2',
                                  command=edit_window.destroy)
            cancel_btn.pack(side=tk.LEFT)
            
            print("‚úÖ Okno edycji zosta≈Ço otwarte")
            
        except Exception as e:
            messagebox.showerror("B≈ÇƒÖd", f"B≈ÇƒÖd otwierania edycji:\n{str(e)}")
            self.logger.error(f"B≈ÇƒÖd otwierania edycji: {e}")
    
    def save_edited_item(self, edit_window, item, edit_vars):
        """Zapisuje edytowanƒÖ pozycjƒô"""
        try:
            # Pobierz nowe warto≈õci
            new_values = []
            fields = ['Kontrahent', 'NIP', 'Nr Faktury', 'Email', 'Telefon', 'Kwota', 'Dni Po Terminie']
            
            for field in fields:
                value = edit_vars[field].get().strip()
                if not value:
                    messagebox.showwarning("Ostrze≈ºenie", f"Pole '{field}' nie mo≈ºe byƒá puste")
                    return
                new_values.append(value)
            
            # Aktualizuj pozycjƒô w podglƒÖdzie
            self.data_mapping_widgets['preview_tree'].item(item, values=new_values)
            
            # Aktualizuj informacje o podglƒÖdzie
            self.update_preview_info()
            
            # Zamknij okno edycji
            edit_window.destroy()
            
            messagebox.showinfo("Sukces", "Pozycja zosta≈Ça zaktualizowana")
            print("‚úÖ Pozycja zosta≈Ça zaktualizowana")
            
        except Exception as e:
            messagebox.showerror("B≈ÇƒÖd", f"B≈ÇƒÖd zapisywania zmian:\n{str(e)}")
            self.logger.error(f"B≈ÇƒÖd zapisywania zmian: {e}")
    
    def update_preview_info(self):
        """Aktualizuje informacjƒô o liczbie pozycji w podglƒÖdzie"""
        preview_count = len(self.data_mapping_widgets['preview_tree'].get_children())
        if self.data_processor.excel_data is not None:
            total_count = len(self.data_processor.excel_data)
            self.data_mapping_widgets['preview_info'].config(
                text=f"‚ÑπÔ∏è W podglƒÖdzie: {preview_count} pozycji z {total_count} dostƒôpnych"
            )
        else:
            self.data_mapping_widgets['preview_info'].config(text=f"‚ÑπÔ∏è W podglƒÖdzie: {preview_count} pozycji")
    
    def save_mapping(self):
        """Zapisuje mapowanie kolumn"""
        mapping = {}
        for field, combo in self.data_mapping_widgets['mapping_fields'].items():
            if combo.get():
                mapping[field] = combo.get()
        
        self.config.save_mapping(mapping)
        messagebox.showinfo("Sukces", "Mapowanie zosta≈Ço zapisane")
    
    def load_mapping(self):
        """Wczytuje mapowanie kolumn"""
        mapping = self.config.load_mapping()
        for field, col_name in mapping.items():
            if field in self.data_mapping_widgets['mapping_fields']:
                self.data_mapping_widgets['mapping_fields'][field].set(col_name)
    
    def save_template(self, template_type):
        """Zapisuje szablon email lub SMS"""
        try:
            if template_type == 'email':
                content = self.templates_widgets['email_editor'].get(1.0, tk.END)
            else:
                content = self.templates_widgets['sms_editor'].get(1.0, tk.END)
            
            self.config.save_template(template_type, content)
            messagebox.showinfo("Sukces", f"Szablon {template_type} zosta≈Ç zapisany")
        except Exception as e:
            messagebox.showerror("B≈ÇƒÖd", f"B≈ÇƒÖd zapisywania szablonu:\n{str(e)}")
    
    def load_template(self, template_type):
        """Wczytuje szablon email lub SMS"""
        try:
            content = self.config.load_template(template_type)
            
            if template_type == 'email':
                editor = self.templates_widgets['email_editor']
            else:
                editor = self.templates_widgets['sms_editor']
            
            editor.delete(1.0, tk.END)
            editor.insert(1.0, content)
            
            messagebox.showinfo("Sukces", f"Szablon {template_type} zosta≈Ç wczytany")
        except Exception as e:
            messagebox.showerror("B≈ÇƒÖd", f"B≈ÇƒÖd wczytywania szablonu:\n{str(e)}")
    
    def show_email_preview(self):
        """Pokazuje podglƒÖd szablonu emaila z edytorem WYSIWYG"""
        preview_window = tk.Toplevel(self.root)
        preview_window.title("üëÅÔ∏è PodglƒÖd szablonu emaila")
        preview_window.geometry("800x600")
        preview_window.configure(bg='white')
        
        # G≈Ç√≥wny kontener
        main_frame = ttk.Frame(preview_window)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Pasek narzƒôdzi edytora
        toolbar_frame = ttk.Frame(main_frame)
        toolbar_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Przyciski stylowania
        style_buttons = [
            ("üî§", "Arial", lambda: self.apply_font_family("Arial")),
            ("üî§", "Times", lambda: self.apply_font_family("Times New Roman")),
            ("üî§", "Courier", lambda: self.apply_font_family("Courier New")),
            ("üìè", "12", lambda: self.apply_font_size("12")),
            ("üìè", "14", lambda: self.apply_font_size("14")),
            ("üìè", "16", lambda: self.apply_font_size("16")),
            ("üìè", "18", lambda: self.apply_font_size("18")),
            ("üìè", "20", lambda: self.apply_font_size("20")),
        ]
        
        for i, (icon, text, command) in enumerate(style_buttons):
            btn = tk.Button(toolbar_frame, text=f"{icon} {text}", 
                           bg=self.config.primary_color,
                           fg=self.config.white_color,
                           relief='flat',
                           borderwidth=0,
                           font=('Arial', 9, 'bold'),
                           cursor='hand2',
                           command=command)
            btn.pack(side=tk.LEFT, padx=(0, 5))
        
        # Separator
        ttk.Separator(toolbar_frame, orient='vertical').pack(side=tk.LEFT, padx=10, fill=tk.Y)
        
        # Przyciski formatowania
        format_buttons = [
            ("B", "bold", lambda: self.apply_format("bold")),
            ("I", "italic", lambda: self.apply_format("italic")),
            ("U", "underline", lambda: self.apply_format("underline")),
            ("üé®", "color", lambda: self.apply_color()),
            ("‚¨ÖÔ∏è", "undo", lambda: self.undo_action()),
            ("‚û°Ô∏è", "redo", lambda: self.redo_action()),
        ]
        
        for i, (text, tooltip, command) in enumerate(format_buttons):
            btn = tk.Button(toolbar_frame, text=text, 
                           bg=self.config.primary_color,
                           fg=self.config.white_color,
                           relief='flat',
                           borderwidth=0,
                           font=('Arial', 10, 'bold'),
                           cursor='hand2',
                           command=command)
            btn.pack(side=tk.LEFT, padx=(0, 5))
        
        # Separator
        ttk.Separator(toolbar_frame, orient='vertical').pack(side=tk.LEFT, padx=10, fill=tk.Y)
        
        # Przyciski stopki
        footer_buttons = [
            ("üìÑ", "Dodaj stopkƒô HTML", lambda: self.add_html_footer()),
            ("üìÑ", "Dodaj stopkƒô tekst", lambda: self.add_text_footer()),
            ("üóëÔ∏è", "Wyczy≈õƒá stopkƒô", lambda: self.clear_footer()),
        ]
        
        for i, (icon, text, command) in enumerate(footer_buttons):
            btn = tk.Button(toolbar_frame, text=f"{icon} {text}", 
                           bg=self.config.primary_color,
                           fg=self.config.white_color,
                           relief='flat',
                                   borderwidth=0,
                                   font=('Arial', 9, 'bold'),
                                   cursor='hand2',
                                   command=command)
            btn.pack(side=tk.LEFT, padx=(0, 5))
        
        # Przyciski placeholders
        self.templates_widgets['add_placeholder_btn'].config(command=self.add_placeholder)
        self.templates_widgets['edit_placeholder_btn'].config(command=self.edit_placeholder)
        self.templates_widgets['delete_placeholder_btn'].config(command=self.delete_placeholder)
        self.templates_widgets['save_placeholders_btn'].config(command=self.save_placeholders)
        self.templates_widgets['load_placeholders_btn'].config(command=self.load_placeholders)
        self.templates_widgets['reset_placeholders_btn'].config(command=self.reset_placeholders)
        
        # Edytor WYSIWYG
        editor_frame = ttk.Frame(main_frame)
        editor_frame.pack(fill=tk.BOTH, expand=True)
        
        # Edytor tekstu z obs≈ÇugƒÖ HTML
        self.email_editor = tk.Text(editor_frame, wrap=tk.WORD, 
                                   font=('Arial', 12), 
                                   bg='white', fg='black',
                                   insertbackground='black')
        self.email_editor.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # Scrollbar
        editor_scrollbar = ttk.Scrollbar(editor_frame, orient=tk.VERTICAL, 
                                        command=self.email_editor.yview)
        editor_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.email_editor.configure(yscrollcommand=editor_scrollbar.set)
        
        # Wczytaj aktualny szablon
        try:
            email_template = self.config.load_template('email')
            self.email_editor.insert('1.0', email_template)
        except Exception as e:
            print(f"‚ö†Ô∏è B≈ÇƒÖd wczytywania szablonu maila: {str(e)}")
            # Wstaw domy≈õlny szablon
            default_template = """<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Przypomnienie o p≈Çatno≈õci</title>
</head>
<body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
    <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
        <h2 style="color: #d32f2f;">Przypomnienie o p≈Çatno≈õci</h2>
        
        <p>Szanowny/a {imie} {nazwisko},</p>
        
        <p>Informujemy, ≈ºe termin p≈Çatno≈õci w wysoko≈õci <strong>{kwota} PLN</strong> 
        up≈ÇynƒÖ≈Ç dnia <strong>{termin}</strong>.</p>
        
        <p>Od dnia terminu p≈Çatno≈õci minƒô≈Ço ju≈º <strong>{dni_po_terminie} dni</strong>.</p>
        
        <p>Prosimy o niezw≈Çoczne uregulowanie zaleg≈Çej p≈Çatno≈õci.</p>
        
        <p>W przypadku pyta≈Ñ prosimy o kontakt.</p>
        
        <p>Z powa≈ºaniem,<br>
        Dzia≈Ç Windykacji</p>
    </div>
</body>
</html>"""
            self.email_editor.insert('1.0', default_template)
        
        # Historia edycji
        self.editor_history = []
        self.current_history_index = -1
        
        # Przyciski akcji
        action_frame = ttk.Frame(main_frame)
        action_frame.pack(fill=tk.X, pady=(10, 0))
        
        save_btn = tk.Button(action_frame, text="üíæ Zapisz zmiany", 
                            bg=self.config.primary_color,
                            fg=self.config.white_color,
                            relief='flat',
                            borderwidth=0,
                            font=('Arial', 10, 'bold'),
                            cursor='hand2',
                            command=lambda: self.save_email_template_from_editor())
        save_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        preview_btn = tk.Button(action_frame, text="üëÅÔ∏è PodglƒÖd HTML", 
                               bg=self.config.primary_color,
                               fg=self.config.white_color,
                               relief='flat',
                               borderwidth=0,
                               font=('Arial', 10, 'bold'),
                               cursor='hand2',
                               command=lambda: self.preview_html())
        preview_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        close_btn = tk.Button(action_frame, text="‚ùå Zamknij", 
                             bg=self.config.primary_color,
                             fg=self.config.white_color,
                             relief='flat',
                             borderwidth=0,
                             font=('Arial', 10, 'bold'),
                             cursor='hand2',
                             command=preview_window.destroy)
        close_btn.pack(side=tk.LEFT)
        
        # Bind events dla historii edycji
        self.email_editor.bind('<Key>', self.on_editor_change)
        self.email_editor.bind('<Button-1>', self.on_editor_change)
        
        print("‚úÖ Edytor WYSIWYG zosta≈Ç otwarty")
    
    def start_sending(self):
        """Rozpoczyna proces wysy≈Çki"""
        # Sprawd≈∫ czy sƒÖ pozycje w podglƒÖdzie
        preview_items = self.data_mapping_widgets['preview_tree'].get_children()
        if not preview_items:
            messagebox.showwarning("Ostrze≈ºenie", "Brak pozycji do wys≈Çania")
            return
        
        # Sprawd≈∫ konfiguracjƒô
        if not self.sending_widgets['email_var'].get() and not self.sending_widgets['sms_var'].get():
            messagebox.showwarning("Ostrze≈ºenie", "Wybierz przynajmniej jeden kana≈Ç wysy≈Çki")
            return
        
        # Utw√≥rz okno wysy≈Çki
        self.create_sending_window()
    
    def create_sending_window(self):
        """Tworzy okno wysy≈Çki"""
        self.sending_window = tk.Toplevel(self.root)
        self.sending_window.title("Wysy≈Çka powiadomie≈Ñ")
        self.sending_window.geometry("1000x600")
        self.sending_window.transient(self.root)
        
        # Kontener
        container = ttk.Frame(self.sending_window, padding="20")
        container.pack(fill=tk.BOTH, expand=True)
        
        # Nag≈Ç√≥wek
        header = ttk.Label(container, text="üì§ Wysy≈Çka powiadomie≈Ñ", style='Header.TLabel')
        header.pack(pady=(0, 20))
        
        # Kontrolki wysy≈Çki
        controls_frame = ttk.LabelFrame(container, text="‚öôÔ∏è Kontrola wysy≈Çki", padding="10")
        controls_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Checkboxy dla kana≈Ç√≥w
        channels_frame = ttk.Frame(controls_frame)
        channels_frame.pack(fill=tk.X, pady=(0, 10))
        
        sending_email_var = tk.BooleanVar(value=self.sending_widgets['email_var'].get())
        sending_sms_var = tk.BooleanVar(value=self.sending_widgets['sms_var'].get())
        
        email_check = ttk.Checkbutton(channels_frame, text="üìß Wysy≈Çaj emaile", 
                                    variable=sending_email_var)
        email_check.pack(side=tk.LEFT, padx=(0, 20))
        
        sms_check = ttk.Checkbutton(channels_frame, text="üì± Wysy≈Çaj SMS", 
                                   variable=sending_sms_var)
        sms_check.pack(side=tk.LEFT)
        
        # Przyciski kontroli
        buttons_frame = ttk.Frame(controls_frame)
        buttons_frame.pack(pady=(10, 0))
        
        send_btn = ttk.Button(buttons_frame, text="üöÄ Rozpocznij wysy≈Çkƒô", 
                             style='Primary.TButton', command=lambda: self.start_sending_process(sending_email_var, sending_sms_var))
        send_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        export_btn = ttk.Button(buttons_frame, text="üìä Eksportuj status CSV", 
                               command=self.export_sending_status_to_csv)
        export_btn.pack(side=tk.LEFT)
        
        # Treeview ze statusem
        status_frame = ttk.LabelFrame(container, text="üìä Status wysy≈Çki", padding="10")
        status_frame.pack(fill=tk.BOTH, expand=True)
        
        # Sekcja log√≥w testowych (widoczna tylko w trybie testowym)
        self.test_logs_frame = ttk.LabelFrame(container, text="üìù Logi testowej wysy≈Çki", padding="10")
        self.test_logs_frame.pack(fill=tk.BOTH, expand=True, pady=(10, 0))
        
        # Text widget dla log√≥w
        self.test_logs_text = scrolledtext.ScrolledText(self.test_logs_frame, height=8, wrap=tk.WORD)
        self.test_logs_text.pack(fill=tk.BOTH, expand=True)
        
        # Ukryj sekcjƒô log√≥w na starcie
        self.test_logs_frame.pack_forget()
        
        status_tree_frame = ttk.Frame(status_frame)
        status_tree_frame.pack(fill=tk.BOTH, expand=True)
        
        status_columns = ('Kontrahent', 'NIP', 'Nr Faktury', 'Email', 'Telefon', 
                         'Kwota', 'Dni Po Terminie', 'Email Status', 'SMS Status')
        status_tree = ttk.Treeview(status_tree_frame, columns=status_columns, 
                                  show='headings', height=15)
        
        for col in status_columns:
            status_tree.heading(col, text=col)
            status_tree.column(col, width=100)
        
        status_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # Scrollbar dla status treeview
        status_scrollbar = ttk.Scrollbar(status_tree_frame, orient=tk.VERTICAL, 
                                        command=status_tree.yview)
        status_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        status_tree.configure(yscrollcommand=status_scrollbar.set)
        
        # Przygotuj dane do wysy≈Çki
        self.prepare_sending_data(status_tree)
        
        # Zapisz referencje
        self.sending_status_tree = status_tree
        self.sending_email_var = sending_email_var
        self.sending_sms_var = sending_sms_var
    
    def prepare_sending_data(self, status_tree):
        """Przygotowuje dane do wysy≈Çki"""
        # Wyczy≈õƒá poprzednie dane
        for item in status_tree.get_children():
            status_tree.delete(item)
        
        # Pobierz dane z podglƒÖdu
        preview_items = self.data_mapping_widgets['preview_tree'].get_children()
        
        for item in preview_items:
            item_data = self.data_mapping_widgets['preview_tree'].item(item)
            values = list(item_data['values'])
            
            # Dodaj statusy
            values.extend(['Oczekuje', 'Oczekuje'])
            
            # Dodaj do status tree
            status_tree.insert('', 'end', values=values, tags=item_data['tags'])
    
    def start_sending_process(self, email_var, sms_var):
        """Rozpoczyna proces wysy≈Çki"""
        # Sprawd≈∫ czy to tryb testowy
        test_mode = self.sending_widgets['test_mode_var'].get()
        
        if test_mode:
            # Tryb testowy - nie potrzebujemy konfiguracji API
            self.logger.info("üß™ Uruchamiam tryb testowej wysy≈Çki")
            # Rozpocznij test w osobnym wƒÖtku
            threading.Thread(target=self.test_sending_process, 
                           args=(email_var.get(), sms_var.get()), 
                           daemon=True).start()
            return
        
        # Normalny tryb wysy≈Çki - sprawd≈∫ konfiguracjƒô
        if email_var.get():
            client_id = self.config_widgets['email_vars']['client_id'].get().strip()
            client_secret = self.config_widgets['email_vars']['client_secret'].get().strip()
            
            if not client_id or not client_secret:
                messagebox.showerror("B≈ÇƒÖd", "Skonfiguruj Microsoft 365 API")
                return
            
            self.email_sender = EmailSender(client_id, client_secret)
        
        if sms_var.get():
            sms_token = self.config_widgets['sms_vars']['sms_token'].get().strip()
            sms_url = self.config_widgets['sms_vars']['sms_url'].get().strip()
            
            if not sms_token:
                messagebox.showerror("B≈ÇƒÖd", "Skonfiguruj SMS API")
                return
            
            if not sms_url:
                sms_url = "https://api.smsapi.pl/sms.do"  # Domy≈õlny URL
            
            sender_name = self.config_widgets['sms_vars']['sms_sender'].get().strip()
            # U≈ºyj None je≈õli sender_name jest pusty
            if not sender_name:
                sender_name = None
            self.sms_sender = SMSSender(sms_token, sender_name, sms_url)
        
        # Potwierd≈∫ wysy≈Çkƒô
        if not messagebox.askyesno("Potwierd≈∫", "Czy na pewno chcesz rozpoczƒÖƒá wysy≈Çkƒô?"):
            return
        
        # Rozpocznij wysy≈Çkƒô w osobnym wƒÖtku
        threading.Thread(target=self.send_reminders_from_window, 
                       args=(email_var.get(), sms_var.get()), 
                       daemon=True).start()
    
    def test_sending_process(self, send_email, send_sms):
        """Testuje proces wysy≈Çki w trybie testowym"""
        try:
            self.logger.info("üß™ Rozpoczynam testowƒÖ wysy≈Çkƒô")
            
            # Dodaj informacjƒô o rozpoczƒôciu testu do UI
            start_log = "üöÄ ROZPOCZYNAM TEST WYSY≈ÅKI\n"
            start_log += f"   üìß Email: {'‚úÖ' if send_email else '‚ùå'}\n"
            start_log += f"   üì± SMS: {'‚úÖ' if send_sms else '‚ùå'}\n"
            start_log += f"   üìä Liczba pozycji do przetestowania: {len(self.sending_status_tree.get_children())}\n"
            
            self.root.after(0, lambda: self.add_test_log(start_log))
            
            # Pobierz szablony
            email_template = self.templates_widgets['email_editor'].get(1.0, tk.END)
            sms_template = self.templates_widgets['sms_editor'].get(1.0, tk.END)
            
            # Pobierz dane do testowania
            items = self.sending_status_tree.get_children()
            
            for item in items:
                item_data = self.sending_status_tree.item(item)
                values = item_data['values']
                index = item_data['tags'][0]
                
                # Przygotuj dane do szablon√≥w
                template_data = {
                    'kontrahent': values[0],
                    'nip': values[1],
                    'nr_faktury': values[2],
                    'email': values[3],
                    'telefon': values[4],
                    'kwota': values[5],
                    'dni_po_terminie': values[6],
                    'data_faktury': ''
                }
                
                # Je≈õli to pozycja z Excel (nie rƒôcznie dodana), pobierz data_faktury
                if index >= 0 and self.data_processor.excel_data is not None:
                    try:
                        row = self.data_processor.excel_data.iloc[index]
                        if 'data_faktury' in self.data_processor.column_mapping:
                            data_faktury_col = self.data_processor.column_mapping['data_faktury']
                            if data_faktury_col in row:
                                template_data['data_faktury'] = str(row[data_faktury_col])
                    except Exception as e:
                        self.logger.error(f"B≈ÇƒÖd pobierania data_faktury: {e}")
                
                # Testuj email
                if send_email and values[3]:  # Email
                    try:
                        # Przygotuj tre≈õƒá emaila
                        subject = "üß™ TEST - Przypomnienie o p≈Çatno≈õci"
                        html_content = email_template.format(**template_data)
                        
                        # Log testowy
                        test_log = f"üß™ TEST EMAIL:\n"
                        test_log += f"   üìß Do: {values[0]} <{values[3]}>\n"
                        test_log += f"   üìù Temat: {subject}\n"
                        test_log += f"   üìÑ Tre≈õƒá: {html_content[:200]}...\n"
                        test_log += f"   ‚úÖ Status: Symulacja wys≈Çania udana\n"
                        
                        self.logger.info(test_log)
                        
                        # Dodaj log do UI
                        self.root.after(0, lambda: self.add_test_log(test_log))
                        
                        # Aktualizuj status w UI
                        status = "üß™ Test OK"
                        self.root.after(0, lambda: self.update_sending_status(item, status, values[8]))
                        
                    except Exception as e:
                        error_msg = str(e)[:30]
                        self.logger.error(f"B≈ÇƒÖd testu email: {e}")
                        self.root.after(0, lambda: self.update_sending_status(item, f"‚ùå {error_msg}", values[8]))
                
                # Testuj SMS
                if send_sms and values[4]:  # Telefon
                    try:
                        # Przygotuj tre≈õƒá SMS
                        message = sms_template.format(**template_data)
                        
                        # Log testowy
                        test_log = f"üß™ TEST SMS:\n"
                        test_log += f"   üì± Do: {values[0]} <{values[4]}>\n"
                        test_log += f"   üìÑ Tre≈õƒá: {message}\n"
                        test_log += f"   ‚úÖ Status: Symulacja wys≈Çania udana\n"
                        
                        self.logger.info(test_log)
                        
                        # Dodaj log do UI
                        self.root.after(0, lambda: self.add_test_log(test_log))
                        
                        # Aktualizuj status w UI
                        status = "üß™ Test OK"
                        self.root.after(0, lambda: self.update_sending_status(item, values[7], status))
                        
                    except Exception as e:
                        error_msg = str(e)[:30]
                        self.logger.error(f"B≈ÇƒÖd testu SMS: {e}")
                        self.root.after(0, lambda: self.update_sending_status(item, values[7], f"‚ùå {error_msg}"))
            
            # Dodaj informacjƒô o zako≈Ñczeniu testu
            end_log = "üèÅ TEST ZAKO≈ÉCZONY\n"
            end_log += "   ‚úÖ Wszystkie pozycje zosta≈Çy przetestowane\n"
            end_log += "   üìä Sprawd≈∫ status w tabeli powy≈ºej\n"
            end_log += "   üìù Szczeg√≥≈Çowe logi dostƒôpne poni≈ºej\n"
            end_log += "   üíæ Mo≈ºesz wyeksportowaƒá wyniki do CSV\n"
            end_log += "   üéØ Test zako≈Ñczony pomy≈õlnie!\n"
            end_log += "   üöÄ Mo≈ºesz teraz uruchomiƒá rzeczywistƒÖ wysy≈Çkƒô\n"
            end_log += "   üí° Wy≈ÇƒÖcz tryb testowy przed rzeczywistƒÖ wysy≈ÇkƒÖ\n"
            end_log += "üîß Sprawd≈∫ logi aby zidentyfikowaƒá potencjalne problemy\n"
            end_log += "‚úÖ Wszystko gotowe do rzeczywistej wysy≈Çki!\n"
            end_log += "üéâ Gratulacje! Test przeszed≈Ç pomy≈õlnie!\n"
            end_log += "üöÄ System gotowy do produkcji!\n"
            end_log += "üéØ Kolejny krok: Uruchom rzeczywistƒÖ wysy≈Çkƒô!\n"
            
            self.root.after(0, lambda: self.add_test_log(end_log))
            
            # Zako≈Ñcz test i poka≈º podsumowanie
            self.root.after(0, lambda: self.show_test_summary())
            
        except Exception as e:
            self.root.after(0, lambda: messagebox.showerror("B≈ÇƒÖd", f"B≈ÇƒÖd testu: {str(e)}"))
    
    def add_test_log(self, log_message):
        """Dodaje log do UI testowej wysy≈Çki"""
        try:
            if hasattr(self, 'test_logs_text'):
                # Dodaj timestamp
                from datetime import datetime
                timestamp = datetime.now().strftime("%H:%M:%S")
                
                # Dodaj separator
                separator = "‚îÄ" * 80
                
                # Formatuj log z lepszym wizualnym oddzieleniem
                formatted_log = f"\n{separator}\n"
                formatted_log += f"[{timestamp}] {log_message}\n"
                formatted_log += f"{separator}\n"
                
                # Dodaj do widgetu tekstowego
                self.test_logs_text.insert(tk.END, formatted_log)
                
                # Przewi≈Ñ na d√≥≈Ç
                self.test_logs_text.see(tk.END)
                
        except Exception as e:
            self.logger.error(f"B≈ÇƒÖd dodawania logu do UI: {e}")
    
    def show_test_summary(self):
        """Pokazuje podsumowanie testu"""
        try:
            # Policz wyniki test√≥w
            items = self.sending_status_tree.get_children()
            total_items = len(items)
            test_ok_count = 0
            
            for item in items:
                item_data = self.sending_status_tree.item(item)
                values = item_data['values']
                if 'üß™ Test OK' in str(values[7]) or 'üß™ Test OK' in str(values[8]):
                    test_ok_count += 1
            
            # Poka≈º podsumowanie
            summary = f"üß™ Test zako≈Ñczony!\n\n"
            summary += f"üìä Statystyki:\n"
            summary += f"   ‚Ä¢ Przetestowano: {total_items} pozycji\n"
            summary += f"   ‚Ä¢ Testy udane: {test_ok_count} ‚úÖ\n"
            summary += f"   ‚Ä¢ Testy nieudane: {total_items - test_ok_count} ‚ùå\n\n"
            summary += "üìù Szczeg√≥≈Çowe logi zosta≈Çy wy≈õwietlone w oknie testowym.\n"
            summary += "üíæ Mo≈ºesz wyeksportowaƒá wyniki do pliku CSV.\n\n"
            summary += "üéØ Test zako≈Ñczony pomy≈õlnie!\n"
            summary += "üöÄ Mo≈ºesz teraz uruchomiƒá rzeczywistƒÖ wysy≈Çkƒô.\n\n"
            summary += "üí° Wskaz√≥wka: Wy≈ÇƒÖcz tryb testowy przed rzeczywistƒÖ wysy≈ÇkƒÖ.\n"
            summary += "üîß Sprawd≈∫ logi aby zidentyfikowaƒá potencjalne problemy.\n"
            summary += "‚úÖ Wszystko gotowe do rzeczywistej wysy≈Çki!\n\n"
            summary += "üéâ Gratulacje! Test przeszed≈Ç pomy≈õlnie!\n"
            summary += "üöÄ System gotowy do produkcji!\n\n"
            summary += "üéØ Kolejny krok: Uruchom rzeczywistƒÖ wysy≈Çkƒô!\n"
            summary += "‚úÖ System przeszed≈Ç wszystkie testy pomy≈õlnie!"
            
            messagebox.showinfo("Podsumowanie testu", summary)
            
            # Zapytaj o eksport CSV
            if messagebox.askyesno("Eksport CSV", "Czy chcesz pobraƒá plik CSV z wynikami testu?"):
                self.export_sending_status_to_csv()
                
        except Exception as e:
            self.logger.error(f"B≈ÇƒÖd wy≈õwietlania podsumowania testu: {e}")
    
    def send_reminders_from_window(self, send_email, send_sms):
        """Wysy≈Ça powiadomienia z okna wysy≈Çki z przerwami miƒôdzy wysy≈Çkami"""
        try:
            # Pobierz szablony
            email_template = self.templates_widgets['email_editor'].get(1.0, tk.END)
            sms_template = self.templates_widgets['sms_editor'].get(1.0, tk.END)
            
            # Pobierz dane do wys≈Çania
            items = self.sending_status_tree.get_children()
            total_items = len(items)
            
            self.logger.info(f"üöÄ Rozpoczynam wysy≈Çkƒô {total_items} pozycji")
            self.logger.info(f"üìß Email: {'‚úÖ' if send_email else '‚ùå'}, üì± SMS: {'‚úÖ' if send_sms else '‚ùå'}")
            
            # Ustaw status "Wysy≈Çanie..." dla wszystkich pozycji
            for item in items:
                item_data = self.sending_status_tree.item(item)
                values = item_data['values']
                
                # Ustaw status "Wysy≈Çanie..." dla email
                if send_email and values[3]:  # Email
                    self.root.after(0, lambda item=item: self.update_sending_status(item, "‚è≥ Wysy≈Çanie...", values[8]))
                
                # Ustaw status "Wysy≈Çanie..." dla SMS
                if send_sms and values[4]:  # Telefon
                    self.root.after(0, lambda item=item: self.update_sending_status(item, values[7], "‚è≥ Wysy≈Çanie..."))
            
            # Rozpocznij wysy≈Çkƒô w osobnym wƒÖtku z przerwami
            threading.Thread(target=self._send_reminders_with_delays, 
                           args=(items, send_email, send_sms, email_template, sms_template), 
                           daemon=True).start()
            
        except Exception as e:
            self.logger.error(f"B≈ÇƒÖd podczas przygotowania wysy≈Çki: {e}")
            self.root.after(0, lambda: messagebox.showerror("B≈ÇƒÖd", f"B≈ÇƒÖd przygotowania wysy≈Çki: {str(e)}"))
    
    def _send_reminders_with_delays(self, items, send_email, send_sms, email_template, sms_template):
        """Wysy≈Ça powiadomienia z przerwami miƒôdzy wysy≈Çkami"""
        try:
            total_items = len(items)
            self.logger.info(f"üì§ Rozpoczynam wysy≈Çkƒô z przerwami dla {total_items} pozycji")
            
            for i, item in enumerate(items):
                item_data = self.sending_status_tree.item(item)
                values = item_data['values']
                index = item_data['tags'][0]
                
                self.logger.info(f"üì§ Przetwarzam pozycjƒô {i+1}/{total_items}: {values[0]}")
                
                # Przygotuj dane do szablon√≥w
                template_data = {
                    'kontrahent': values[0],
                    'nip': values[1],
                    'nr_faktury': values[2],
                    'email': values[3],
                    'telefon': values[4],
                    'kwota': values[5],
                    'dni_po_terminie': values[6],
                    'data_faktury': ''
                }
                
                # Je≈õli to pozycja z Excel, pobierz data_faktury
                if index >= 0 and self.data_processor.excel_data is not None:
                    try:
                        row = self.data_processor.excel_data.iloc[index]
                        if 'data_faktury' in self.data_processor.column_mapping:
                            data_faktury_col = self.data_processor.column_mapping['data_faktury']
                            if data_faktury_col in row:
                                template_data['data_faktury'] = str(row[data_faktury_col])
                    except Exception as e:
                        self.logger.error(f"B≈ÇƒÖd pobierania data_faktury: {e}")
                
                # Wy≈õlij email
                if send_email and values[3]:  # Email
                    try:
                        self.logger.info(f"üìß Wysy≈Çam email do: {values[3]}")
                        success, message = self.email_sender.send_reminder_email(
                            values[3], template_data, email_template
                        )
                        status = "‚úÖ Wys≈Çano" if success else f"‚ùå {message[:30]}"
                        self.logger.info(f"üìß Email {values[3]}: {status}")
                        self.root.after(0, lambda item=item, status=status: self.update_sending_status(item, status, values[8]))
                    except Exception as e:
                        error_msg = str(e)[:30]
                        self.logger.error(f"‚ùå B≈ÇƒÖd email {values[3]}: {error_msg}")
                        self.root.after(0, lambda item=item, error=error_msg: self.update_sending_status(item, f"‚ùå {error}", values[8]))
                
                # Wy≈õlij SMS
                if send_sms and values[4]:  # Telefon
                    try:
                        self.logger.info(f"üì± Wysy≈Çam SMS do: {values[4]}")
                        success, message = self.sms_sender.send_reminder_sms(
                            values[4], template_data, sms_template
                        )
                        status = "‚úÖ Wys≈Çano" if success else f"‚ùå {message[:30]}"
                        self.logger.info(f"üì± SMS {values[4]}: {status}")
                        self.root.after(0, lambda item=item, status=status: self.update_sending_status(item, values[7], status))
                    except Exception as e:
                        error_msg = str(e)[:30]
                        self.logger.error(f"‚ùå B≈ÇƒÖd SMS {values[4]}: {error_msg}")
                        self.root.after(0, lambda item=item, error=error_msg: self.update_sending_status(item, values[7], f"‚ùå {error}"))
                
                # PRZERWA miƒôdzy wysy≈Çkami (2 sekundy)
                if i < total_items - 1:  # Nie czekaj po ostatniej pozycji
                    self.logger.info(f"‚è≥ Czekam 2 sekundy przed nastƒôpnƒÖ wysy≈ÇkƒÖ...")
                    time.sleep(2)
            
            self.logger.info(f"‚úÖ Wysy≈Çka zako≈Ñczona dla {total_items} pozycji")
            
            # Zako≈Ñcz wysy≈Çkƒô i zapytaj o pobranie CSV
            self.root.after(0, lambda: self.ask_for_csv_export())
            
        except Exception as e:
            self.logger.error(f"‚ùå B≈ÇƒÖd podczas wysy≈Çki z przerwami: {e}")
            self.root.after(0, lambda: messagebox.showerror("B≈ÇƒÖd", f"B≈ÇƒÖd wysy≈Çki: {str(e)}"))
    
    def ask_for_csv_export(self):
        """Pyta u≈ºytkownika czy chce pobraƒá CSV ze statusem wysy≈Çki"""
        if messagebox.askyesno("Eksport CSV", "Wysy≈Çka zako≈Ñczona! Czy chcesz pobraƒá plik CSV ze statusem wysy≈Çki?"):
            self.export_sending_status_to_csv()
    
    def export_sending_status_to_csv(self):
        """Eksportuje status wysy≈Çki do pliku CSV"""
        try:
            # Pobierz wszystkie dane ze status tree
            all_items = self.sending_status_tree.get_children()
            if not all_items:
                messagebox.showwarning("Ostrze≈ºenie", "Brak danych do eksportu")
                return
            
            # Przygotuj dane do eksportu
            export_data = []
            headers = ['Kontrahent', 'NIP', 'Nr Faktury', 'Email', 'Telefon', 'Kwota', 'Dni Po Terminie', 'Email Status', 'SMS Status']
            
            for item in all_items:
                values = list(self.sending_status_tree.item(item)['values'])
                export_data.append(values)
            
            # Wybierz miejsce zapisu
            from datetime import datetime
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"status_wysylki_{timestamp}.csv"
            
            file_path = filedialog.asksaveasfilename(
                title="Zapisz status wysy≈Çki jako CSV",
                defaultextension=".csv",
                filetypes=[("Pliki CSV", "*.csv"), ("Wszystkie pliki", "*.*")],
                initialname=filename
            )
            
            if not file_path:
                return
            
            # Zapisz do CSV
            import csv
            with open(file_path, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow(headers)
                writer.writerows(export_data)
            
            messagebox.showinfo("Sukces", f"Status wysy≈Çki zosta≈Ç zapisany do:\n{file_path}")
            
        except Exception as e:
            messagebox.showerror("B≈ÇƒÖd", f"B≈ÇƒÖd eksportu CSV:\n{str(e)}")
            self.logger.error(f"B≈ÇƒÖd eksportu CSV: {e}")
    
    def update_sending_status(self, item, email_status, sms_status):
        """Aktualizuje status wysy≈Çki"""
        try:
            values = list(self.sending_status_tree.item(item)['values'])
            values[7] = email_status  # Email Status
            values[8] = sms_status    # SMS Status
            self.sending_status_tree.item(item, values=values)
        except Exception as e:
            self.logger.error(f"B≈ÇƒÖd aktualizacji statusu: {e}")
    
    def save_email_config(self):
        """Zapisuje konfiguracjƒô email"""
        try:
            config = {}
            for field, var in self.config_widgets['email_vars'].items():
                config[field] = var.get()
            
            self.config.save_api_config(config)
            messagebox.showinfo("Sukces", "Konfiguracja email zosta≈Ça zapisana")
        except Exception as e:
            messagebox.showerror("B≈ÇƒÖd", f"B≈ÇƒÖd zapisywania konfiguracji:\n{str(e)}")
    
    def test_email_connection(self):
        """Testuje po≈ÇƒÖczenie email"""
        try:
            client_id = self.config_widgets['email_vars']['client_id'].get().strip()
            client_secret = self.config_widgets['email_vars']['client_secret'].get().strip()
            test_email = self.config_widgets['email_vars']['test_email'].get().strip()
            
            if not client_id or not client_secret:
                messagebox.showerror("B≈ÇƒÖd", "Wype≈Çnij Client ID i Client Secret")
                return
            
            email_sender = EmailSender(client_id, client_secret)
            success, message = email_sender.test_connection(test_email)
            
            if success:
                messagebox.showinfo("Sukces", message)
            else:
                messagebox.showerror("B≈ÇƒÖd", message)
                
        except Exception as e:
            messagebox.showerror("B≈ÇƒÖd", f"B≈ÇƒÖd testu po≈ÇƒÖczenia:\n{str(e)}")
    
    def save_sms_config(self):
        """Zapisuje konfiguracjƒô SMS"""
        try:
            config = self.config.load_api_config()
            for field, var in self.config_widgets['sms_vars'].items():
                config[field] = var.get()
            
            self.config.save_api_config(config)
            messagebox.showinfo("Sukces", "Konfiguracja SMS zosta≈Ça zapisana")
        except Exception as e:
            messagebox.showerror("B≈ÇƒÖd", f"B≈ÇƒÖd zapisywania konfiguracji:\n{str(e)}")
    
    def test_sms_connection(self):
        """Testuje po≈ÇƒÖczenie SMS"""
        try:
            sms_token = self.config_widgets['sms_vars']['sms_token'].get().strip()
            sms_url = self.config_widgets['sms_vars']['sms_url'].get().strip()
            test_number = self.config_widgets['sms_vars']['sms_test_number'].get().strip()
            
            if not sms_token:
                messagebox.showerror("B≈ÇƒÖd", "Wype≈Çnij Token SMS API")
                return
            
            if not sms_url:
                sms_url = "https://api.smsapi.pl/sms.do"  # Domy≈õlny URL
            
            sms_sender = SMSSender(sms_token, None, sms_url)
            # Najpierw sprawd≈∫ tylko autoryzacjƒô bez wysy≈Çania testowego SMS
            success, message = sms_sender.test_connection(None)
            
            if success:
                messagebox.showinfo("Sukces", message)
            else:
                messagebox.showerror("B≈ÇƒÖd", message)
                
        except Exception as e:
            messagebox.showerror("B≈ÇƒÖd", f"B≈ÇƒÖd testu po≈ÇƒÖczenia:\n{str(e)}")
    
    def apply_font_family(self, font_family):
        """Zmienia rodzinƒô czcionki w edytorze"""
        try:
            if hasattr(self, 'email_editor'):
                # Pobierz aktualny tekst
                current_text = self.email_editor.get("1.0", "end-1c")
                
                # ZastƒÖp style font-family w HTML
                if 'font-family:' in current_text:
                    # ZastƒÖp istniejƒÖcy font-family
                    import re
                    pattern = r'font-family:\s*[^;]+;'
                    replacement = f'font-family: {font_family}, sans-serif;'
                    new_text = re.sub(pattern, replacement, current_text)
                else:
                    # Dodaj font-family do body
                    new_text = current_text.replace('<body', f'<body style="font-family: {font_family}, sans-serif;"')
                
                # ZastƒÖp tekst w edytorze
                self.email_editor.delete("1.0", "end")
                self.email_editor.insert("1.0", new_text)
                
                print(f"‚úÖ Zmieniono czcionkƒô na: {font_family}")
        except Exception as e:
            print(f"B≈ÇƒÖd zmiany czcionki: {e}")
    
    def apply_font_size(self, size):
        """Zmienia rozmiar czcionki w edytorze"""
        try:
            if hasattr(self, 'email_editor'):
                # Pobierz aktualny tekst
                current_text = self.email_editor.get("1.0", "end-1c")
                
                # ZastƒÖp style font-size w HTML
                if 'font-size:' in current_text:
                    # ZastƒÖp istniejƒÖcy font-size
                    import re
                    pattern = r'font-size:\s*[^;]+;'
                    replacement = f'font-size: {size}px;'
                    new_text = re.sub(pattern, replacement, current_text)
                else:
                    # Dodaj font-size do body
                    new_text = current_text.replace('<body', f'<body style="font-size: {size}px;"')
                
                # ZastƒÖp tekst w edytorze
                self.email_editor.delete("1.0", "end")
                self.email_editor.insert("1.0", new_text)
                
                print(f"‚úÖ Zmieniono rozmiar czcionki na: {size}px")
        except Exception as e:
            print(f"B≈ÇƒÖd zmiany rozmiaru czcionki: {e}")
    
    def apply_format(self, format_type):
        """Aplikuje formatowanie tekstu w edytorze"""
        try:
            if hasattr(self, 'email_editor'):
                # Pobierz zaznaczony tekst
                try:
                    selected_text = self.email_editor.get("sel.first", "sel.last")
                    if selected_text:
                        # Formatuj zaznaczony tekst
                        if format_type == "bold":
                            formatted_text = f"<strong>{selected_text}</strong>"
                        elif format_type == "italic":
                            formatted_text = f"<em>{selected_text}</em>"
                        elif format_type == "underline":
                            formatted_text = f"<u>{selected_text}</u>"
                        else:
                            return
                        
                        # ZastƒÖp zaznaczony tekst
                        self.email_editor.delete("sel.first", "sel.last")
                        self.email_editor.insert("insert", formatted_text)
                        print(f"‚úÖ Zastosowano formatowanie: {format_type}")
                    else:
                        print("‚ö†Ô∏è Zaznacz tekst przed formatowaniem")
                except tk.TclError:
                    print("‚ö†Ô∏è Zaznacz tekst przed formatowaniem")
        except Exception as e:
            print(f"B≈ÇƒÖd formatowania: {e}")
    
    def apply_color(self):
        """Otwiera okno wyboru koloru i aplikuje go do zaznaczonego tekstu"""
        try:
            if hasattr(self, 'email_editor'):
                from tkinter import colorchooser
                
                # Otw√≥rz okno wyboru koloru
                color = colorchooser.askcolor(title="Wybierz kolor tekstu")
                if color[1]:  # color[1] zawiera hex koloru
                    hex_color = color[1]
                    
                    # Pobierz zaznaczony tekst
                    try:
                        selected_text = self.email_editor.get("sel.first", "sel.last")
                        if selected_text:
                            # Formatuj zaznaczony tekst z kolorem
                            formatted_text = f'<span style="color: {hex_color};">{selected_text}</span>'
                            
                            # ZastƒÖp zaznaczony tekst
                            self.email_editor.delete("sel.first", "sel.last")
                            self.email_editor.insert("insert", formatted_text)
                            print(f"‚úÖ Zastosowano kolor: {hex_color}")
                        else:
                            print("‚ö†Ô∏è Zaznacz tekst przed zmianƒÖ koloru")
                    except tk.TclError:
                        print("‚ö†Ô∏è Zaznacz tekst przed zmianƒÖ koloru")
        except Exception as e:
            print(f"B≈ÇƒÖd zmiany koloru: {e}")
    
    def undo_action(self):
        """Cofa ostatniƒÖ akcjƒô w edytorze"""
        try:
            if hasattr(self, 'email_editor') and hasattr(self, 'editor_history') and self.editor_history:
                if self.current_history_index > 0:
                    self.current_history_index -= 1
                    previous_text = self.editor_history[self.current_history_index]
                    self.email_editor.delete("1.0", "end")
                    self.email_editor.insert("1.0", previous_text)
                    print("‚úÖ Cofniƒôto akcjƒô")
                else:
                    print("‚ö†Ô∏è Brak akcji do cofniƒôcia")
        except Exception as e:
            print(f"B≈ÇƒÖd cofania: {e}")
    
    def redo_action(self):
        """Ponawia ostatniƒÖ cofniƒôtƒÖ akcjƒô w edytorze"""
        try:
            if hasattr(self, 'email_editor') and hasattr(self, 'editor_history') and self.editor_history:
                if self.current_history_index < len(self.editor_history) - 1:
                    self.current_history_index += 1
                    next_text = self.editor_history[self.current_history_index]
                    self.email_editor.delete("1.0", "end")
                    self.email_editor.insert("1.0", next_text)
                    print("‚úÖ Ponowiono akcjƒô")
                else:
                    print("‚ö†Ô∏è Brak akcji do ponowienia")
        except Exception as e:
            print(f"B≈ÇƒÖd ponawiania: {e}")
    
    def on_editor_change(self, event=None):
        """Obs≈Çuguje zmiany w edytorze i zapisuje historiƒô"""
        try:
            if hasattr(self, 'email_editor') and hasattr(self, 'editor_history'):
                current_text = self.email_editor.get("1.0", "end-1c")
                
                # Dodaj do historii tylko je≈õli tekst siƒô zmieni≈Ç
                if not self.editor_history or current_text != self.editor_history[-1]:
                    # Usu≈Ñ przysz≈ÇƒÖ historiƒô je≈õli cofniƒôto i zmieniono
                    if self.current_history_index < len(self.editor_history) - 1:
                        self.editor_history = self.editor_history[:self.current_history_index + 1]
                    
                    # Dodaj nowy stan do historii
                    self.editor_history.append(current_text)
                    self.current_history_index = len(self.editor_history) - 1
                    
                    # Ogranicz historiƒô do 50 stan√≥w
                    if len(self.editor_history) > 50:
                        self.editor_history.pop(0)
                        self.current_history_index -= 1
        except Exception as e:
            print(f"B≈ÇƒÖd zapisywania historii: {e}")
    
    def add_html_footer(self):
        """Dodaje stopkƒô HTML do edytora"""
        try:
            if hasattr(self, 'email_editor'):
                html_footer = """
                
                <div style="border-top: 1px solid #ccc; margin-top: 20px; padding-top: 20px; text-align: center; font-size: 12px; color: #666;">
                    <p>--- Wiadomo≈õƒá wygenerowana automatycznie ---</p>
                    <p>¬© 2024 KPJ.PL - System Windykacji</p>
                    <p>W razie pyta≈Ñ prosimy o kontakt: windykacja@kpj.pl</p>
                </div>
                """
                self.email_editor.insert("end", html_footer)
                print("‚úÖ Dodano stopkƒô HTML")
        except Exception as e:
            print(f"B≈ÇƒÖd dodawania stopki HTML: {e}")
    
    def add_text_footer(self):
        """Dodaje stopkƒô tekstowƒÖ do edytora"""
        try:
            if hasattr(self, 'email_editor'):
                text_footer = """
                
                ---
                Wiadomo≈õƒá wygenerowana automatycznie
                ¬© 2024 KPJ.PL - System Windykacji
                W razie pyta≈Ñ prosimy o kontakt: windykacja@kpj.pl
                """
                self.email_editor.insert("end", text_footer)
                print("‚úÖ Dodano stopkƒô tekstowƒÖ")
        except Exception as e:
            print(f"B≈ÇƒÖd dodawania stopki tekstowej: {e}")
    
    def clear_footer(self):
        """Czy≈õci stopkƒô z edytora"""
        try:
            if hasattr(self, 'email_editor'):
                current_text = self.email_editor.get("1.0", "end-1c")
                # Usu≈Ñ ostatnie linie zawierajƒÖce stopkƒô
                lines = current_text.split('\n')
                while lines and ('---' in lines[-1] or '¬©' in lines[-1] or 'windykacja@kpj.pl' in lines[-1] or 'Wiadomo≈õƒá wygenerowana automatycznie' in lines[-1]):
                    lines.pop()
                # Usu≈Ñ puste linie na ko≈Ñcu
                while lines and not lines[-1].strip():
                    lines.pop()
                
                new_text = '\n'.join(lines)
                self.email_editor.delete("1.0", "end")
                self.email_editor.insert("1.0", new_text)
                print("‚úÖ Stopka zosta≈Ça usuniƒôta")
        except Exception as e:
            print(f"B≈ÇƒÖd usuwania stopki: {e}")
    
    def load_placeholders(self):
        """Wczytuje placeholdery sta≈Çe"""
        try:
            placeholders = self.config.load_placeholders()
            self.placeholders_data = placeholders
            
            # Wyczy≈õƒá listƒô
            self.templates_widgets['placeholders_listbox'].delete(0, tk.END)
            
            # Dodaj placeholdery do listy
            for placeholder in placeholders:
                display_text = f"{placeholder['name']} = {placeholder['value']}"
                self.templates_widgets['placeholders_listbox'].insert(tk.END, display_text)
            
            print("‚úÖ Placeholdery zosta≈Çy wczytane")
            
        except Exception as e:
            print(f"‚ö†Ô∏è B≈ÇƒÖd wczytywania placeholders: {str(e)}")
            # Ustaw domy≈õlne placeholdery
            self.set_default_placeholders()
    
    def set_default_placeholders(self):
        """Ustawia domy≈õlne placeholdery"""
        default_placeholders = [
            {
                'name': 'numer_konta',
                'value': 'PL12345678901234567890123456',
                'description': 'Numer konta bankowego'
            },
            {
                'name': 'data_wymagalnosci',
                'value': '31.12.2024',
                'description': 'Data wymagalno≈õci p≈Çatno≈õci'
            },
            {
                'name': 'kwota_zadluzenia',
                'value': '0.00 PLN',
                'description': 'Kwota zad≈Çu≈ºenia'
            },
            {
                'name': 'nazwa_firmy',
                'value': 'KPJ.PL Sp. z o.o.',
                'description': 'Nazwa firmy windykacyjnej'
            },
            {
                'name': 'email_kontaktowy',
                'value': 'windykacja@kpj.pl',
                'description': 'Email kontaktowy'
            },
            {
                'name': 'telefon_kontaktowy',
                'value': '+48 123 456 789',
                'description': 'Telefon kontaktowy'
            }
        ]
        
        self.placeholders_data = default_placeholders
        self.save_placeholders()
        self.load_placeholders()
        print("‚úÖ Ustawiono domy≈õlne placeholdery")
    
    def add_placeholder(self):
        """Dodaje nowy placeholder"""
        try:
            name = self.templates_widgets['placeholder_name_var'].get().strip()
            value = self.templates_widgets['placeholder_value_var'].get().strip()
            description = self.templates_widgets['placeholder_desc_var'].get().strip()
            
            if not name or not value:
                messagebox.showwarning("Ostrze≈ºenie", "Nazwa i warto≈õƒá placeholdera sƒÖ wymagane")
                return
            
            # Sprawd≈∫ czy placeholder o takiej nazwie ju≈º istnieje
            for placeholder in self.placeholders_data:
                if placeholder['name'] == name:
                    messagebox.showwarning("Ostrze≈ºenie", f"Placeholder o nazwie '{name}' ju≈º istnieje")
                    return
            
            # Dodaj nowy placeholder
            new_placeholder = {
                'name': name,
                'value': value,
                'description': description
            }
            
            self.placeholders_data.append(new_placeholder)
            
            # Dodaj do listy
            display_text = f"{name} = {value}"
            self.templates_widgets['placeholders_listbox'].insert(tk.END, display_text)
            
            # Wyczy≈õƒá pola
            self.templates_widgets['placeholder_name_var'].set('')
            self.templates_widgets['placeholder_value_var'].set('')
            self.templates_widgets['placeholder_desc_var'].set('')
            
            print(f"‚úÖ Dodano placeholder: {name}")
            
        except Exception as e:
            print(f"B≈ÇƒÖd dodawania placeholdera: {e}")
    
    def edit_placeholder(self):
        """Edytuje wybrany placeholder"""
        try:
            selection = self.templates_widgets['placeholders_listbox'].curselection()
            if not selection:
                messagebox.showwarning("Ostrze≈ºenie", "Wybierz placeholder do edycji")
                return
            
            index = selection[0]
            placeholder = self.placeholders_data[index]
            
            # Wype≈Çnij pola aktualnymi warto≈õciami
            self.templates_widgets['placeholder_name_var'].set(placeholder['name'])
            self.templates_widgets['placeholder_value_var'].set(placeholder['value'])
            self.templates_widgets['placeholder_desc_var'].set(placeholder['description'])
            
            # Usu≈Ñ stary placeholder
            self.placeholders_data.pop(index)
            self.templates_widgets['placeholders_listbox'].delete(index)
            
            print(f"‚úÖ Przygotowano do edycji placeholder: {placeholder['name']}")
            
        except Exception as e:
            print(f"B≈ÇƒÖd edycji placeholdera: {e}")
    
    def delete_placeholder(self):
        """Usuwa wybrany placeholder"""
        try:
            selection = self.templates_widgets['placeholders_listbox'].curselection()
            if not selection:
                messagebox.showwarning("Ostrze≈ºenie", "Wybierz placeholder do usuniƒôcia")
                return
            
            index = selection[0]
            placeholder = self.placeholders_data[index]
            
            # Potwierd≈∫ usuniƒôcie
            if messagebox.askyesno("Potwierdzenie", f"Czy na pewno chcesz usunƒÖƒá placeholder '{placeholder['name']}'?"):
                # Usu≈Ñ z danych
                self.placeholders_data.pop(index)
                
                # Usu≈Ñ z listy
                self.templates_widgets['placeholders_listbox'].delete(index)
                
                # Wyczy≈õƒá pola je≈õli by≈Çy wype≈Çnione
                if (self.templates_widgets['placeholder_name_var'].get() == placeholder['name'] and
                    self.templates_widgets['placeholder_value_var'].get() == placeholder['value']):
                    self.templates_widgets['placeholder_name_var'].set('')
                    self.templates_widgets['placeholder_value_var'].set('')
                    self.templates_widgets['placeholder_desc_var'].set('')
                
                print(f"‚úÖ Usuniƒôto placeholder: {placeholder['name']}")
            
        except Exception as e:
            print(f"B≈ÇƒÖd usuwania placeholdera: {e}")
    
    def save_placeholders(self):
        """Zapisuje placeholdery do pliku"""
        try:
            self.config.save_placeholders(self.placeholders_data)
            messagebox.showinfo("Sukces", "Placeholdery zosta≈Çy zapisane")
            print("‚úÖ Placeholdery zosta≈Çy zapisane")
        except Exception as e:
            messagebox.showerror("B≈ÇƒÖd", f"B≈ÇƒÖd zapisywania placeholders:\n{str(e)}")
            print(f"B≈ÇƒÖd zapisywania placeholders: {e}")
    
    def reset_placeholders(self):
        """Resetuje placeholdery do warto≈õci domy≈õlnych"""
        try:
            if messagebox.askyesno("Potwierdzenie", 
                                 "Czy na pewno chcesz zresetowaƒá placeholdery do warto≈õci domy≈õlnych?\nWszystkie zmiany zostanƒÖ utracone."):
                self.set_default_placeholders()
                messagebox.showinfo("Sukces", "Placeholdery zosta≈Çy zresetowane do warto≈õci domy≈õlnych")
        except Exception as e:
            print(f"B≈ÇƒÖd resetowania placeholders: {e}")
    
    def get_placeholder_value(self, name):
        """Pobiera warto≈õƒá placeholdera po nazwie"""
        try:
            for placeholder in self.placeholders_data:
                if placeholder['name'] == name:
                    return placeholder['value']
            return None
        except Exception as e:
            print(f"B≈ÇƒÖd pobierania warto≈õci placeholdera '{name}': {e}")
            return None
    
    def save_email_template_from_editor(self):
        """Zapisuje szablon emaila z edytora"""
        try:
            content = self.email_editor.get("1.0", "end-1c")
            self.config.save_template('email', content)
            messagebox.showinfo("Sukces", "Szablon emaila zosta≈Ç zapisany")
            print("‚úÖ Szablon emaila zosta≈Ç zapisany z edytora")
        except Exception as e:
            messagebox.showerror("B≈ÇƒÖd", f"B≈ÇƒÖd zapisywania szablonu:\n{str(e)}")
            print(f"B≈ÇƒÖd zapisywania szablonu: {e}")
    
    def preview_html(self):
        """Pokazuje podglƒÖd HTML w nowym oknie"""
        try:
            html_content = self.email_editor.get("1.0", "end-1c")
            
            preview_window = tk.Toplevel(self.root)
            preview_window.title("üëÅÔ∏è PodglƒÖd HTML")
            preview_window.geometry("600x400")
            
            # Konwertuj tekst na HTML
            html_text = f"""
            <html>
            <head>
                <meta charset="utf-8">
                <style>
                    body {{ font-family: Arial, sans-serif; margin: 20px; }}
                    .footer {{ border-top: 1px solid #ccc; margin-top: 20px; padding-top: 20px; 
                              font-size: 12px; color: #666; text-align: center; }}
                </style>
            </head>
            <body>
                {html_content}
                <div class="footer">
                    <p>--- Wiadomo≈õƒá wygenerowana automatycznie ---</p>
                    <p>¬© 2024 KPJ.PL - System Windykacji</p>
                    <p>W razie pyta≈Ñ prosimy o kontakt: windykacja@kpj.pl</p>
                </div>
            </body>
            </html>
            """
            
            preview_window.configure(bg='white')
            preview_window.html_text = html_text
            
            # U≈ºyj ttk.Frame z obs≈ÇugƒÖ HTML
            html_frame = ttk.Frame(preview_window)
            html_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
            
            # U≈ºyj ttk.Label z obs≈ÇugƒÖ HTML
            html_label = ttk.Label(html_frame, text=html_text, justify=tk.LEFT)
            html_label.pack(fill=tk.BOTH, expand=True)
            
            # Przycisk zamkniƒôcia
            close_btn = tk.Button(preview_window, text="‚ùå Zamknij", 
                                 bg=self.config.primary_color,
                                 fg=self.config.white_color,
                                 relief='flat',
                                 borderwidth=0,
                                 font=('Arial', 10, 'bold'),
                                 cursor='hand2',
                                 command=preview_window.destroy)
            close_btn.pack(pady=(10, 0))
            
            print("‚úÖ PodglƒÖd HTML zosta≈Ç otwarty")
        except Exception as e:
            print(f"B≈ÇƒÖd otwierania podglƒÖdu HTML: {e}")
    
    def remove_settled_items(self):
        """Usuwa pozycje rozliczone (z kwotƒÖ ‚â§ 0) i od≈õwie≈ºa podglƒÖd"""
        if self.data_processor.excel_data is None:
            messagebox.showwarning("Ostrze≈ºenie", "Najpierw wczytaj plik Excel/CSV")
            return
        
        print(f"üîç Przed usuniƒôciem: {len(self.data_processor.excel_data)} pozycji")
        
        # Sprawd≈∫ aktualny stan podglƒÖdu
        current_preview_items = len(self.data_mapping_widgets['preview_tree'].get_children())
        print(f"üîç Aktualny podglƒÖd zawiera: {current_preview_items} pozycji")
        
        # Usu≈Ñ pozycje rozliczone
        removed_count = self.data_processor.remove_settled_items()
        
        print(f"üóëÔ∏è Usuniƒôto: {removed_count} pozycji")
        print(f"üìä Po usuniƒôciu: {len(self.data_processor.excel_data)} pozycji")
        
        if removed_count > 0:
            # Od≈õwie≈º podglƒÖd
            print("üîÑ Od≈õwie≈ºam podglƒÖd...")
            self.generate_preview()
            
            # Sprawd≈∫ nowy stan podglƒÖdu
            new_preview_items = len(self.data_mapping_widgets['preview_tree'].get_children())
            print(f"üîç Nowy podglƒÖd zawiera: {new_preview_items} pozycji")
            
            if new_preview_items == len(self.data_processor.excel_data):
                print("‚úÖ PodglƒÖd zosta≈Ç poprawnie od≈õwie≈ºony")
            else:
                print(f"‚ùå B≈ÇƒÖd: podglƒÖd {new_preview_items} vs dane {len(self.data_processor.excel_data)}")
            
            messagebox.showinfo("Sukces", f"Usuniƒôto {removed_count} pozycji rozliczonych")
        else:
            messagebox.showinfo("Informacja", "Nie znaleziono pozycji rozliczonych do usuniƒôcia")
    
    def run(self):
        """Uruchamia aplikacjƒô"""
        self.root.mainloop()

if __name__ == "__main__":
    app = WindykatorApp()
    app.run() 