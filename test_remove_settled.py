#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Test funkcji usuwania pozycji rozliczonych i od≈õwie≈ºania podglƒÖdu
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from data_processor import DataProcessor
import pandas as pd

def test_remove_settled_and_preview():
    """Testuje usuwanie pozycji rozliczonych i generowanie podglƒÖdu"""
    print("üß™ Test usuwania pozycji rozliczonych i od≈õwie≈ºania podglƒÖdu")
    print("=" * 60)
    
    # Utw√≥rz procesor danych
    processor = DataProcessor()
    
    # Wczytaj plik
    file_path = "Brak p≈Çatno≈õci 08.08.csv"
    if not os.path.exists(file_path):
        print(f"‚ùå Plik {file_path} nie istnieje!")
        return
    
    print(f"üìÅ Wczytujƒô plik: {file_path}")
    success = processor.load_excel_file(file_path)
    
    if not success:
        print("‚ùå Nie uda≈Ço siƒô wczytaƒá pliku!")
        return
    
    print(f"‚úÖ Plik wczytany pomy≈õlnie!")
    print(f"üìä PoczƒÖtkowa liczba wierszy: {len(processor.excel_data)}")
    
    # Sprawd≈∫ mapowanie kolumn
    print(f"üîç Mapowanie kolumn: {processor.column_mapping}")
    
    # Generuj podglƒÖd przed usuniƒôciem
    print("\nüîç Generujƒô podglƒÖd PRZED usuniƒôciem pozycji rozliczonych...")
    preview_before = processor.get_preview_data()
    print(f"üìä Liczba wierszy w podglƒÖdzie PRZED: {len(preview_before)}")
    
    # Usu≈Ñ pozycje rozliczone
    print("\nüóëÔ∏è Usuwam pozycje rozliczone...")
    removed_count = processor.remove_settled_items()
    print(f"üóëÔ∏è Usuniƒôto {removed_count} pozycji rozliczonych")
    print(f"üìä Liczba wierszy PO usuniƒôciu: {len(processor.excel_data)}")
    
    # Generuj podglƒÖd po usuniƒôciu
    print("\nüîç Generujƒô podglƒÖd PO usuniƒôciu pozycji rozliczonych...")
    preview_after = processor.get_preview_data()
    print(f"üìä Liczba wierszy w podglƒÖdzie PO: {len(preview_after)}")
    
    # Sprawd≈∫ czy liczby siƒô zgadzajƒÖ
    print("\nüîç Sprawdzam sp√≥jno≈õƒá danych...")
    if len(preview_after) == len(processor.excel_data):
        print("‚úÖ Sp√≥jno≈õƒá OK: podglƒÖd zawiera wszystkie wiersze")
    else:
        print(f"‚ùå B≈ÇƒÖd sp√≥jno≈õci: podglƒÖd {len(preview_after)} vs dane {len(processor.excel_data)}")
    
    # Sprawd≈∫ czy usuniƒôte pozycje rzeczywi≈õcie mia≈Çy kwotƒô ‚â§ 0
    if 'kwota' in processor.column_mapping:
        kwota_col = processor.column_mapping['kwota']
        print(f"\nüîç Sprawdzam kolumnƒô kwoty: {kwota_col}")
        
        # Sprawd≈∫ czy wszystkie pozosta≈Çe kwoty sƒÖ > 0
        all_positive = True
        for idx, row in processor.excel_data.iterrows():
            try:
                kwota_str = str(row[kwota_col]).replace(',', '.').strip()
                kwota_num = float(kwota_str) if kwota_str else 0
                if kwota_num <= 0:
                    print(f"‚ùå Znaleziono kwotƒô ‚â§ 0 w wierszu {idx}: {kwota_num}")
                    all_positive = False
            except (ValueError, TypeError):
                print(f"‚ö†Ô∏è Nie mo≈ºna przekonwertowaƒá kwoty w wierszu {idx}: {row[kwota_col]}")
        
        if all_positive:
            print("‚úÖ Wszystkie pozosta≈Çe kwoty sƒÖ > 0")
        else:
            print("‚ùå Znaleziono kwoty ‚â§ 0 w pozosta≈Çych wierszach")
    
    print("\n" + "=" * 60)
    print("üèÅ Test zako≈Ñczony")

if __name__ == "__main__":
    test_remove_settled_and_preview() 